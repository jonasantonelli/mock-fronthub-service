{"version":3,"sources":["webpack://[name]/webpack/bootstrap","webpack://[name]/external \"react@16.12.0\"","webpack://[name]/./node_modules/react-hook-form/dist/index.esm.js","webpack://[name]/./src/react-hook-form.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","isHTMLElement","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","isNullOrUndefined","isObjectType","isObject","Array","isArray","Date","isKey","test","compact","filter","Boolean","stringToPath","input","replace","split","set","path","index","tempPath","length","lastIndex","newValue","objValue","isNaN","transformToNestObject","data","isUndefined","val","undefined","obj","defaultValue","result","reduce","removeAllEventListeners","ref","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","getRadioValue","options","previous","option","checked","isRadioInput","element","type","isFileInput","isCheckBoxInput","isMultipleSelect","defaultResult","validResult","getCheckboxValue","values","map","attributes","getFieldValue","fieldsRef","shallowFieldsStateRef","excludeDisabled","field","current","disabled","files","selected","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","isEmptyObject","keys","isBoolean","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isSameRef","fieldValue","isString","isPrimitive","getFieldsValues","shallowFieldsState","shouldUnregister","search","output","startsWith","find","deepMerge","target","source","targetValue","sourceValue","_a","deepEqual","object1","object2","isErrorObject","keys1","keys2","includes","val1","val2","isRegex","RegExp","getValueAndMessage","validationData","message","isFunction","isMessage","getValidateError","appendErrors","validateAllFieldCriteria","errors","error","assign","types","validateField","async","required","maxLength","minLength","min","max","pattern","validate","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","maxLengthOutput","minLengthOutput","patternValue","validateRef","validateError","validationResult","validateFunction","entries","getPath","pathWithIndex","getInnerPath","flat","Infinity","assignWatchFields","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","forEach","skipValidation","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","getFieldArrayParentName","substring","indexOf","isMatchFieldArrayName","searchName","isNameInFieldArray","names","some","cloneObject","isWeb","copy","File","getTime","Set","Map","modeChecker","isOnSubmit","isRadioOrCheckboxFunction","isWindowUndefined","window","document","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","defaultValues","shouldFocusError","criteriaMode","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","isValidateAllFieldCriteria","formState","setFormState","isDirty","dirtyFields","submitCount","touched","isSubmitting","isSubmitSuccessful","readFormStateRef","formStateRef","observerRef","updateFormState","state","shouldRenderBaseOnError","shouldRender","shouldReRender","validFields","fieldsWithValidation","previousError","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","fields","Promise","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","setFieldArrayDirtyFields","parentName","isFieldWatched","match","renderWatchedInputs","found","size","setFieldArrayDefaultValues","payload","shouldSkipValidation","parentNodeName","lastIndexOf","currentError","validateResolver","removeFieldEventListener","forceDelete","handleChange","fieldRef","findRemovedFieldAndRemoveListener","updateWatchedValue","watchField","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","fieldArrayValue","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldErrors","fieldError","focus","focusOnErrorField","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","commonProps","setValue","register","refOrValidationOptions","rules","unregister","control","watch","prop","reset","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","shouldFocus","__rest","getOwnPropertySymbols","propertyIsEnumerable","FormContext","displayName","useFormContext","FormProvider","children","props","Provider","generateId","performance","now","Math","random","toString","removeArrayAt","removeAtIndexes","removeAt","moveArrayAt","from","to","splice","swapArrayAt","indexA","indexB","temp","prepend","insert","fillEmptyArray","fill","mapValueToBoolean","fillBooleanArray","mapIds","keyName","useFieldArray","methods","focusIndexRef","fieldArrayParentName","memoizedDefaultValues","setFields","getFieldArrayValue","getCurrentFieldsValues","setFieldAndValidState","fieldsValues","resetFields","cleanup","updateDirtyFieldsWithDefaultValues","updatedFieldArrayValues","defaultFieldArrayValues","updateDirtyFieldsBaseOnDefaultValues","base","innerKey","batchStateUpdate","method","args","updatedFieldValues","updatedFormValues","shouldSet","shouldUpdateValid","argA","argB","argC","argD","_b","pop","resetFunctions","fieldArrayNames","delete","swap","move","emptyArray","append","updateFormValues","remove","useWatch","updateValue","idRef","defaultValueRef","id","watchFieldsHookRender","watchFieldsHook","Controller","as","render","onFocus","rest","isNotFieldArray","getInitialValue","setInputStateValue","valueRef","onFocusRef","commonTask","event","getInputValue","registerField","shouldUpdateValue","onBlur","onChange"],"mappings":"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","file":"react-hook-form@6.11.3.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 98);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { isValidElement, useRef, useState, useCallback, useEffect, useMemo, createContext, useContext, createElement, cloneElement } from 'react';\n\nvar isHTMLElement = (value) => value instanceof HTMLElement;\n\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n    INPUT: 'input',\r\n};\r\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n    onTouched: 'onTouched',\r\n    all: 'all',\r\n};\r\nconst SELECT = 'select';\r\nconst UNDEFINED = 'undefined';\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\n\nfunction attachEventListeners({ ref }, shouldAttachChangeEvent, handleChange) {\r\n    if (isHTMLElement(ref) && handleChange) {\r\n        ref.addEventListener(shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\r\n        ref.addEventListener(EVENTS.BLUR, handleChange);\r\n    }\r\n}\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) &&\r\n    !Array.isArray(value) &&\r\n    isObjectType(value) &&\r\n    !(value instanceof Date);\n\nvar isKey = (value) => !Array.isArray(value) &&\r\n    (/^\\w*$/.test(value) ||\r\n        !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n\nvar compact = (value) => value.filter(Boolean);\n\nvar stringToPath = (input) => compact(input\r\n    .replace(/[\"|']/g, '')\r\n    .replace(/\\[/g, '.')\r\n    .replace(/\\]/g, '')\r\n    .split('.'));\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || Array.isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nvar transformToNestObject = (data, value = {}) => {\r\n    for (const key in data) {\r\n        !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\r\n    }\r\n    return value;\r\n};\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\r\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nvar focusOnErrorField = (fields, fieldErrors) => {\r\n    for (const key in fields) {\r\n        if (get(fieldErrors, key)) {\r\n            const field = fields[key];\r\n            if (field) {\r\n                if (field.ref.focus && isUndefined(field.ref.focus())) {\r\n                    break;\r\n                }\r\n                else if (field.options) {\r\n                    field.options[0].ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\r\n    if (isHTMLElement(ref) && ref.removeEventListener) {\r\n        ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\r\n    }\r\n};\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: '',\r\n};\r\nvar getRadioValue = (options) => Array.isArray(options)\r\n    ? options.reduce((previous, option) => option && option.ref.checked\r\n        ? {\r\n            isValid: true,\r\n            value: option.ref.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nvar getMultipleSelectValue = (options) => [...options]\r\n    .filter(({ selected }) => selected)\r\n    .map(({ value }) => value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isMultipleSelect = (element) => element.type === `${SELECT}-multiple`;\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (Array.isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.ref.checked)\r\n                .map(({ ref: { value } }) => value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        const { checked, value, attributes } = options[0].ref;\r\n        return checked\r\n            ? attributes && !isUndefined(attributes.value)\r\n                ? isUndefined(value) || value === ''\r\n                    ? validResult\r\n                    : { value: value, isValid: true }\r\n                : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nfunction getFieldValue(fieldsRef, name, shallowFieldsStateRef, excludeDisabled) {\r\n    const field = fieldsRef.current[name];\r\n    if (field) {\r\n        const { ref: { value, disabled }, ref, } = field;\r\n        if (disabled && excludeDisabled) {\r\n            return;\r\n        }\r\n        if (isFileInput(ref)) {\r\n            return ref.files;\r\n        }\r\n        if (isRadioInput(ref)) {\r\n            return getRadioValue(field.options).value;\r\n        }\r\n        if (isMultipleSelect(ref)) {\r\n            return getMultipleSelectValue(ref.options);\r\n        }\r\n        if (isCheckBoxInput(ref)) {\r\n            return getCheckboxValue(field.options).value;\r\n        }\r\n        return value;\r\n    }\r\n    if (shallowFieldsStateRef) {\r\n        return get(shallowFieldsStateRef.current, name);\r\n    }\r\n}\n\nfunction isDetached(element) {\r\n    if (!element) {\r\n        return true;\r\n    }\r\n    if (!(element instanceof HTMLElement) ||\r\n        element.nodeType === Node.DOCUMENT_NODE) {\r\n        return false;\r\n    }\r\n    return isDetached(element.parentNode);\r\n}\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nfunction baseGet(object, updatePath) {\r\n    const path = updatePath.slice(0, -1);\r\n    const length = path.length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return object;\r\n}\r\nfunction unset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : stringToPath(path);\r\n    const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    let previousObjRef = undefined;\r\n    if (childObject) {\r\n        delete childObject[key];\r\n    }\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef = undefined;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index &&\r\n                ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (Array.isArray(objectRef) &&\r\n                        !objectRef.filter((data) => (isObject(data) && !isEmptyObject(data)) || isBoolean(data)).length))) {\r\n                previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return object;\r\n}\n\nconst isSameRef = (fieldValue, ref) => fieldValue && fieldValue.ref === ref;\r\nfunction findRemovedFieldAndRemoveListener(fieldsRef, handleChange, field, shallowFieldsStateRef, shouldUnregister, forceDelete) {\r\n    const { ref, ref: { name, type }, } = field;\r\n    const fieldRef = fieldsRef.current[name];\r\n    if (!shouldUnregister) {\r\n        const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\r\n        !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\r\n    }\r\n    if (!type) {\r\n        delete fieldsRef.current[name];\r\n        return;\r\n    }\r\n    if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\r\n        if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\r\n            compact(fieldRef.options).forEach((option, index) => {\r\n                if ((option.ref &&\r\n                    isDetached(option.ref) &&\r\n                    isSameRef(option, option.ref)) ||\r\n                    forceDelete) {\r\n                    removeAllEventListeners(option.ref, handleChange);\r\n                    unset(fieldRef.options, `[${index}]`);\r\n                }\r\n            });\r\n            if (fieldRef.options && !compact(fieldRef.options).length) {\r\n                delete fieldsRef.current[name];\r\n            }\r\n        }\r\n        else {\r\n            delete fieldsRef.current[name];\r\n        }\r\n    }\r\n    else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\r\n        removeAllEventListeners(ref, handleChange);\r\n        delete fieldsRef.current[name];\r\n    }\r\n}\n\nfunction setFieldArrayDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\r\n    let index = -1;\r\n    while (++index < values.length) {\r\n        for (const key in values[index]) {\r\n            if (Array.isArray(values[index][key])) {\r\n                !dirtyFields[index] && (dirtyFields[index] = {});\r\n                dirtyFields[index][key] = [];\r\n                setFieldArrayDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\r\n            }\r\n            else {\r\n                get(defaultValues[index] || {}, key) === values[index][key]\r\n                    ? set(dirtyFields[index] || {}, key)\r\n                    : (dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), { [key]: true }));\r\n            }\r\n        }\r\n        !dirtyFields.length &&\r\n            parentNode &&\r\n            delete parentNode[parentName];\r\n    }\r\n    return dirtyFields.length ? dirtyFields : undefined;\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepMerge(target, source) {\r\n    if (isPrimitive(target) || isPrimitive(source)) {\r\n        return source;\r\n    }\r\n    for (const key in source) {\r\n        const targetValue = target[key];\r\n        const sourceValue = source[key];\r\n        try {\r\n            target[key] =\r\n                (isObject(targetValue) && isObject(sourceValue)) ||\r\n                    (Array.isArray(targetValue) && Array.isArray(sourceValue))\r\n                    ? deepMerge(targetValue, sourceValue)\r\n                    : sourceValue;\r\n        }\r\n        catch (_a) { }\r\n    }\r\n    return target;\r\n}\n\nvar getFieldsValues = (fieldsRef, shallowFieldsState, shouldUnregister, excludeDisabled, search) => {\r\n    const output = {};\r\n    for (const name in fieldsRef.current) {\r\n        if (isUndefined(search) ||\r\n            (isString(search)\r\n                ? name.startsWith(search)\r\n                : Array.isArray(search) && search.find((data) => name.startsWith(data)))) {\r\n            output[name] = getFieldValue(fieldsRef, name, undefined, excludeDisabled);\r\n        }\r\n    }\r\n    return shouldUnregister\r\n        ? transformToNestObject(output)\r\n        : deepMerge(shallowFieldsState, transformToNestObject(output));\r\n};\n\nfunction deepEqual(object1, object2, isErrorObject) {\r\n    if (isPrimitive(object1) ||\r\n        isPrimitive(object2) ||\r\n        object1 instanceof Date ||\r\n        object2 instanceof Date) {\r\n        return object1 === object2;\r\n    }\r\n    const keys1 = Object.keys(object1);\r\n    const keys2 = Object.keys(object2);\r\n    if (keys1.length !== keys2.length) {\r\n        return false;\r\n    }\r\n    for (const key of keys1) {\r\n        if (!(isErrorObject && ['ref', 'context'].includes(key))) {\r\n            const val1 = object1[key];\r\n            const val2 = object2[key];\r\n            if ((isObject(val1) || Array.isArray(val1)) &&\r\n                (isObject(val2) || Array.isArray(val2))\r\n                ? !deepEqual(val1, val2, isErrorObject)\r\n                : val1 !== val2) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n\nfunction isErrorStateChanged({ errors, name, error, validFields, fieldsWithValidation, }) {\r\n    const isValid = isUndefined(error);\r\n    const previousError = get(errors, name);\r\n    return ((isValid && !!previousError) ||\r\n        (!isValid && !deepEqual(previousError, error, true)) ||\r\n        (isValid && get(fieldsWithValidation, name) && !get(validFields, name)));\r\n}\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n    };\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isMessage = (value) => isString(value) || (isObject(value) && isValidElement(value));\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) || (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\r\n    if (validateAllFieldCriteria) {\r\n        const error = errors[name];\r\n        return Object.assign(Object.assign({}, error), { types: Object.assign(Object.assign({}, (error && error.types ? error.types : {})), { [type]: message || true }) });\r\n    }\r\n    return {};\r\n};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, { ref, ref: { type, value }, options, required, maxLength, minLength, min, max, pattern, validate, }, shallowFieldsStateRef) => {\r\n    const name = ref.name;\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = value === '';\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, (exceedMax\r\n            ? appendErrorsCurry(maxType, message)\r\n            : appendErrorsCurry(minType, message)));\r\n    };\r\n    if (required &&\r\n        ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\r\n            (isBoolean(value) && !value) ||\r\n            (isCheckBox && !getCheckboxValue(options).isValid) ||\r\n            (isRadio && !getRadioValue(options).isValid))) {\r\n        const { value, message } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (value) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message, ref: isRadioOrCheckbox\r\n                    ? ((fieldsRef.current[name].options || [])[0] || {}).ref\r\n                    : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const maxOutput = getValueAndMessage(max);\r\n        const minOutput = getValueAndMessage(min);\r\n        if (type === 'number' || (!type && !isNaN(value))) {\r\n            const valueNumber = ref.valueAsNumber || parseFloat(value);\r\n            if (!isNullOrUndefined(maxOutput.value)) {\r\n                exceedMax = valueNumber > maxOutput.value;\r\n            }\r\n            if (!isNullOrUndefined(minOutput.value)) {\r\n                exceedMin = valueNumber < minOutput.value;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(value);\r\n            if (isString(maxOutput.value)) {\r\n                exceedMax = valueDate > new Date(maxOutput.value);\r\n            }\r\n            if (isString(minOutput.value)) {\r\n                exceedMin = valueDate < new Date(minOutput.value);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && !isEmpty && (maxLength || minLength)) {\r\n        const maxLengthOutput = getValueAndMessage(maxLength);\r\n        const minLengthOutput = getValueAndMessage(minLength);\r\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\r\n            value.length > maxLengthOutput.value;\r\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\r\n            value.length < minLengthOutput.value;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty) {\r\n        const { value: patternValue, message } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !patternValue.test(value)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message,\r\n                ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\r\n        const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\r\n        if (isFunction(validate)) {\r\n            const result = await validate(fieldValue);\r\n            const validateError = getValidateError(result, validateRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const [key, validateFunction] of Object.entries(validate)) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateResult = await validateFunction(fieldValue);\r\n                const validateError = getValidateError(validateResult, validateRef, key);\r\n                if (validateError) {\r\n                    validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: validateRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return error;\r\n};\n\nconst getPath = (path, values) => {\r\n    const getInnerPath = (key, value, isObject) => {\r\n        const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\r\n        return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\r\n    };\r\n    return Object.entries(values)\r\n        .map(([key, value]) => getInnerPath(key, value, isObject(values)))\r\n        .flat(Infinity);\r\n};\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, inputValue, isSingleField) => {\r\n    let value;\r\n    watchFields.add(fieldName);\r\n    if (isEmptyObject(fieldValues)) {\r\n        value = undefined;\r\n    }\r\n    else {\r\n        value = get(fieldValues, fieldName);\r\n        if (isObject(value) || Array.isArray(value)) {\r\n            getPath(fieldName, value).forEach((name) => watchFields.add(name));\r\n        }\r\n    }\r\n    return isUndefined(value)\r\n        ? isSingleField\r\n            ? inputValue\r\n            : get(inputValue, fieldName)\r\n        : value;\r\n};\n\nvar skipValidation = ({ isOnBlur, isOnChange, isOnTouch, isTouched, isReValidateOnBlur, isReValidateOnChange, isBlurEvent, isSubmitted, isOnAll, }) => {\r\n    if (isOnAll) {\r\n        return false;\r\n    }\r\n    else if (!isSubmitted && isOnTouch) {\r\n        return !(isTouched || isBlurEvent);\r\n    }\r\n    else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\r\n        return !isBlurEvent;\r\n    }\r\n    else if (isSubmitted ? isReValidateOnChange : isOnChange) {\r\n        return isBlurEvent;\r\n    }\r\n    return true;\r\n};\n\nvar getFieldArrayParentName = (name) => name.substring(0, name.indexOf('['));\n\nconst isMatchFieldArrayName = (name, searchName) => RegExp(`^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(name);\r\nvar isNameInFieldArray = (names, name) => [...names].some((current) => isMatchFieldArrayName(name, current));\n\nvar isSelectInput = (element) => element.type === `${SELECT}-one`;\n\nfunction onDomRemove(fieldsRef, removeFieldEventListenerAndRef) {\r\n    const observer = new MutationObserver(() => {\r\n        for (const field of Object.values(fieldsRef.current)) {\r\n            if (field && field.options) {\r\n                for (const option of field.options) {\r\n                    if (option && option.ref && isDetached(option.ref)) {\r\n                        removeFieldEventListenerAndRef(field);\r\n                    }\r\n                }\r\n            }\r\n            else if (field && isDetached(field.ref)) {\r\n                removeFieldEventListenerAndRef(field);\r\n            }\r\n        }\r\n    });\r\n    observer.observe(window.document, {\r\n        childList: true,\r\n        subtree: true,\r\n    });\r\n    return observer;\r\n}\n\nfunction cloneObject(data, isWeb) {\r\n    let copy;\r\n    if (isPrimitive(data) || (isWeb && data instanceof File)) {\r\n        return data;\r\n    }\r\n    if (data instanceof Date) {\r\n        copy = new Date(data.getTime());\r\n        return copy;\r\n    }\r\n    if (data instanceof Set) {\r\n        copy = new Set();\r\n        for (const item of data) {\r\n            copy.add(item);\r\n        }\r\n        return copy;\r\n    }\r\n    if (data instanceof Map) {\r\n        copy = new Map();\r\n        for (const key of data.keys()) {\r\n            copy.set(key, cloneObject(data.get(key), isWeb));\r\n        }\r\n        return copy;\r\n    }\r\n    copy = Array.isArray(data) ? [] : {};\r\n    for (const key in data) {\r\n        copy[key] = cloneObject(data[key], isWeb);\r\n    }\r\n    return copy;\r\n}\n\nvar modeChecker = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n    isOnAll: mode === VALIDATION_MODE.all,\r\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\n\nvar isRadioOrCheckboxFunction = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nconst isWindowUndefined = typeof window === UNDEFINED;\r\nconst isWeb = typeof document !== UNDEFINED &&\r\n    !isWindowUndefined &&\r\n    !isUndefined(window.HTMLElement);\r\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\r\nfunction useForm({ mode = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, resolver, context, defaultValues = {}, shouldFocusError = true, shouldUnregister = true, criteriaMode, } = {}) {\r\n    const fieldsRef = useRef({});\r\n    const fieldArrayDefaultValuesRef = useRef({});\r\n    const fieldArrayValuesRef = useRef({});\r\n    const watchFieldsRef = useRef(new Set());\r\n    const useWatchFieldsRef = useRef({});\r\n    const useWatchRenderFunctionsRef = useRef({});\r\n    const fieldsWithValidationRef = useRef({});\r\n    const validFieldsRef = useRef({});\r\n    const defaultValuesRef = useRef(defaultValues);\r\n    const defaultValuesAtRenderRef = useRef({});\r\n    const isUnMount = useRef(false);\r\n    const isWatchAllRef = useRef(false);\r\n    const handleChangeRef = useRef();\r\n    const shallowFieldsStateRef = useRef({});\r\n    const resetFieldArrayFunctionRef = useRef({});\r\n    const contextRef = useRef(context);\r\n    const resolverRef = useRef(resolver);\r\n    const fieldArrayNamesRef = useRef(new Set());\r\n    const modeRef = useRef(modeChecker(mode));\r\n    const { isOnSubmit, isOnTouch } = modeRef.current;\r\n    const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\r\n    const [formState, setFormState] = useState({\r\n        isDirty: false,\r\n        dirtyFields: {},\r\n        isSubmitted: false,\r\n        submitCount: 0,\r\n        touched: {},\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: !isOnSubmit,\r\n        errors: {},\r\n    });\r\n    const readFormStateRef = useRef({\r\n        isDirty: !isProxyEnabled,\r\n        dirtyFields: !isProxyEnabled,\r\n        touched: !isProxyEnabled || isOnTouch,\r\n        isSubmitting: !isProxyEnabled,\r\n        isValid: !isProxyEnabled,\r\n    });\r\n    const formStateRef = useRef(formState);\r\n    const observerRef = useRef();\r\n    const { isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange, } = useRef(modeChecker(reValidateMode)).current;\r\n    contextRef.current = context;\r\n    resolverRef.current = resolver;\r\n    formStateRef.current = formState;\r\n    shallowFieldsStateRef.current = shouldUnregister\r\n        ? {}\r\n        : isEmptyObject(shallowFieldsStateRef.current)\r\n            ? cloneObject(defaultValues, isWeb)\r\n            : shallowFieldsStateRef.current;\r\n    const updateFormState = useCallback((state = {}) => !isUnMount.current &&\r\n        setFormState(Object.assign(Object.assign({}, formStateRef.current), state)), []);\r\n    const shouldRenderBaseOnError = useCallback((name, error, shouldRender = false, state = {}, isValid) => {\r\n        let shouldReRender = shouldRender ||\r\n            isErrorStateChanged({\r\n                errors: formStateRef.current.errors,\r\n                error,\r\n                name,\r\n                validFields: validFieldsRef.current,\r\n                fieldsWithValidation: fieldsWithValidationRef.current,\r\n            });\r\n        const previousError = get(formStateRef.current.errors, name);\r\n        if (error) {\r\n            unset(validFieldsRef.current, name);\r\n            shouldReRender =\r\n                shouldReRender ||\r\n                    !previousError ||\r\n                    !deepEqual(previousError, error, true);\r\n            set(formStateRef.current.errors, name, error);\r\n        }\r\n        else {\r\n            if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\r\n                set(validFieldsRef.current, name, true);\r\n                shouldReRender = shouldReRender || previousError;\r\n            }\r\n            unset(formStateRef.current.errors, name);\r\n        }\r\n        if ((shouldReRender && !isNullOrUndefined(shouldRender)) ||\r\n            !isEmptyObject(state)) {\r\n            updateFormState(Object.assign(Object.assign(Object.assign({}, state), { errors: formStateRef.current.errors }), (resolverRef.current ? { isValid: !!isValid } : {})));\r\n        }\r\n    }, []);\r\n    const setFieldValue = useCallback((name, rawValue) => {\r\n        const { ref, options } = fieldsRef.current[name];\r\n        const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\r\n            ? ''\r\n            : rawValue;\r\n        if (isRadioInput(ref) && options) {\r\n            options.forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));\r\n        }\r\n        else if (isFileInput(ref) && !isString(value)) {\r\n            ref.files = value;\r\n        }\r\n        else if (isMultipleSelect(ref)) {\r\n            [...ref.options].forEach((selectRef) => (selectRef.selected = value.includes(selectRef.value)));\r\n        }\r\n        else if (isCheckBoxInput(ref) && options) {\r\n            options.length > 1\r\n                ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = Array.isArray(value)\r\n                    ? !!value.find((data) => data === checkboxRef.value)\r\n                    : value === checkboxRef.value))\r\n                : (options[0].ref.checked = !!value);\r\n        }\r\n        else {\r\n            ref.value = value;\r\n        }\r\n    }, []);\r\n    const isFormDirty = useCallback((name, data) => {\r\n        if (readFormStateRef.current.isDirty ||\r\n            readFormStateRef.current.dirtyFields) {\r\n            const formValues = getValues();\r\n            name && data && set(formValues, name, data);\r\n            return !deepEqual(formValues, isEmptyObject(defaultValuesRef.current)\r\n                ? defaultValuesAtRenderRef.current\r\n                : defaultValuesRef.current);\r\n        }\r\n        return false;\r\n    }, []);\r\n    const updateAndGetDirtyState = useCallback((name, shouldRender = true) => {\r\n        if (readFormStateRef.current.isDirty ||\r\n            readFormStateRef.current.dirtyFields) {\r\n            const isFieldDirty = !deepEqual(get(defaultValuesAtRenderRef.current, name), getFieldValue(fieldsRef, name, shallowFieldsStateRef));\r\n            const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\r\n            const previousIsDirty = formStateRef.current.isDirty;\r\n            isFieldDirty\r\n                ? set(formStateRef.current.dirtyFields, name, true)\r\n                : unset(formStateRef.current.dirtyFields, name);\r\n            const state = {\r\n                isDirty: isFormDirty(),\r\n                dirtyFields: formStateRef.current.dirtyFields,\r\n            };\r\n            const isChanged = (readFormStateRef.current.isDirty &&\r\n                previousIsDirty !== state.isDirty) ||\r\n                (readFormStateRef.current.dirtyFields &&\r\n                    isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\r\n            if (isChanged && shouldRender) {\r\n                formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), state);\r\n                updateFormState(Object.assign({}, state));\r\n            }\r\n            return isChanged ? state : {};\r\n        }\r\n        return {};\r\n    }, []);\r\n    const executeValidation = useCallback(async (name, skipReRender) => {\r\n        if (fieldsRef.current[name]) {\r\n            const error = (await validateField(fieldsRef, isValidateAllFieldCriteria, fieldsRef.current[name], shallowFieldsStateRef))[name];\r\n            shouldRenderBaseOnError(name, error, skipReRender);\r\n            return isUndefined(error);\r\n        }\r\n        return false;\r\n    }, [shouldRenderBaseOnError, isValidateAllFieldCriteria]);\r\n    const executeSchemaOrResolverValidation = useCallback(async (names) => {\r\n        const { errors } = await resolverRef.current(getValues(), contextRef.current, isValidateAllFieldCriteria);\r\n        const previousFormIsValid = formStateRef.current.isValid;\r\n        if (Array.isArray(names)) {\r\n            const isInputsValid = names\r\n                .map((name) => {\r\n                const error = get(errors, name);\r\n                error\r\n                    ? set(formStateRef.current.errors, name, error)\r\n                    : unset(formStateRef.current.errors, name);\r\n                return !error;\r\n            })\r\n                .every(Boolean);\r\n            updateFormState({\r\n                isValid: isEmptyObject(errors),\r\n                errors: formStateRef.current.errors,\r\n            });\r\n            return isInputsValid;\r\n        }\r\n        else {\r\n            const error = get(errors, names);\r\n            shouldRenderBaseOnError(names, error, previousFormIsValid !== isEmptyObject(errors), {}, isEmptyObject(errors));\r\n            return !error;\r\n        }\r\n    }, [shouldRenderBaseOnError, isValidateAllFieldCriteria]);\r\n    const trigger = useCallback(async (name) => {\r\n        const fields = name || Object.keys(fieldsRef.current);\r\n        if (resolverRef.current) {\r\n            return executeSchemaOrResolverValidation(fields);\r\n        }\r\n        if (Array.isArray(fields)) {\r\n            !name && (formStateRef.current.errors = {});\r\n            const result = await Promise.all(fields.map(async (data) => await executeValidation(data, null)));\r\n            updateFormState();\r\n            return result.every(Boolean);\r\n        }\r\n        return await executeValidation(fields, readFormStateRef.current.isValid);\r\n    }, [executeSchemaOrResolverValidation, executeValidation]);\r\n    const setInternalValues = useCallback((name, value, { shouldDirty, shouldValidate }) => {\r\n        const data = {};\r\n        set(data, name, value);\r\n        for (const fieldName of getPath(name, value)) {\r\n            if (fieldsRef.current[fieldName]) {\r\n                setFieldValue(fieldName, get(data, fieldName));\r\n                shouldDirty && updateAndGetDirtyState(fieldName);\r\n                shouldValidate && trigger(fieldName);\r\n            }\r\n        }\r\n    }, [trigger, setFieldValue, updateAndGetDirtyState]);\r\n    const setInternalValue = useCallback((name, value, config = {}) => {\r\n        if (fieldsRef.current[name]) {\r\n            setFieldValue(name, value);\r\n            config.shouldDirty && updateAndGetDirtyState(name);\r\n        }\r\n        else if (!isPrimitive(value)) {\r\n            setInternalValues(name, value, config);\r\n            if (fieldArrayNamesRef.current.has(name)) {\r\n                fieldArrayDefaultValuesRef.current[name] = value;\r\n                resetFieldArrayFunctionRef.current[name]({\r\n                    [name]: value,\r\n                });\r\n                if ((readFormStateRef.current.isDirty ||\r\n                    readFormStateRef.current.dirtyFields) &&\r\n                    config.shouldDirty) {\r\n                    set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(value, get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\r\n                    updateFormState({\r\n                        isDirty: !deepEqual(Object.assign(Object.assign({}, getValues()), { [name]: value }), defaultValuesRef.current),\r\n                        dirtyFields: formStateRef.current.dirtyFields,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\r\n    }, [updateAndGetDirtyState, setFieldValue, setInternalValues]);\r\n    const isFieldWatched = (name) => isWatchAllRef.current ||\r\n        watchFieldsRef.current.has(name) ||\r\n        watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\r\n    const renderWatchedInputs = (name, found = true) => {\r\n        if (!isEmptyObject(useWatchFieldsRef.current)) {\r\n            for (const key in useWatchFieldsRef.current) {\r\n                if (!name ||\r\n                    !useWatchFieldsRef.current[key].size ||\r\n                    useWatchFieldsRef.current[key].has(name) ||\r\n                    useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))) {\r\n                    useWatchRenderFunctionsRef.current[key]();\r\n                    found = false;\r\n                }\r\n            }\r\n        }\r\n        return found;\r\n    };\r\n    function setValue(name, value, config) {\r\n        setInternalValue(name, value, config);\r\n        isFieldWatched(name) && updateFormState();\r\n        renderWatchedInputs(name);\r\n        (config || {}).shouldValidate && trigger(name);\r\n    }\r\n    handleChangeRef.current = handleChangeRef.current\r\n        ? handleChangeRef.current\r\n        : async ({ type, target }) => {\r\n            let name = target.name;\r\n            const field = fieldsRef.current[name];\r\n            let error;\r\n            let isValid;\r\n            if (field) {\r\n                const isBlurEvent = type === EVENTS.BLUR;\r\n                const shouldSkipValidation = skipValidation(Object.assign({ isBlurEvent,\r\n                    isReValidateOnChange,\r\n                    isReValidateOnBlur, isTouched: !!get(formStateRef.current.touched, name), isSubmitted: formStateRef.current.isSubmitted }, modeRef.current));\r\n                let state = updateAndGetDirtyState(name, false);\r\n                let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\r\n                if (isBlurEvent &&\r\n                    !get(formStateRef.current.touched, name) &&\r\n                    readFormStateRef.current.touched) {\r\n                    set(formStateRef.current.touched, name, true);\r\n                    state = Object.assign(Object.assign({}, state), { touched: formStateRef.current.touched });\r\n                }\r\n                if (shouldSkipValidation) {\r\n                    renderWatchedInputs(name);\r\n                    return ((!isEmptyObject(state) ||\r\n                        (shouldRender && isEmptyObject(state))) &&\r\n                        updateFormState(state));\r\n                }\r\n                if (resolverRef.current) {\r\n                    const { errors } = await resolverRef.current(getValues(), contextRef.current, isValidateAllFieldCriteria);\r\n                    const previousFormIsValid = formStateRef.current.isValid;\r\n                    error = get(errors, name);\r\n                    if (isCheckBoxInput(target) &&\r\n                        !error &&\r\n                        resolverRef.current) {\r\n                        const parentNodeName = name.substring(0, name.lastIndexOf('.') > name.lastIndexOf('[')\r\n                            ? name.lastIndexOf('.')\r\n                            : name.lastIndexOf('['));\r\n                        const currentError = get(errors, parentNodeName, {});\r\n                        currentError.type &&\r\n                            currentError.message &&\r\n                            (error = currentError);\r\n                        if (parentNodeName &&\r\n                            (currentError ||\r\n                                get(formStateRef.current.errors, parentNodeName))) {\r\n                            name = parentNodeName;\r\n                        }\r\n                    }\r\n                    isValid = isEmptyObject(errors);\r\n                    if (previousFormIsValid !== isValid) {\r\n                        shouldRender = true;\r\n                    }\r\n                }\r\n                else {\r\n                    error = (await validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef))[name];\r\n                }\r\n                renderWatchedInputs(name);\r\n                shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\r\n            }\r\n        };\r\n    function setFieldArrayDefaultValues(data) {\r\n        if (!shouldUnregister) {\r\n            let copy = cloneObject(data, isWeb);\r\n            for (const value of fieldArrayNamesRef.current) {\r\n                if (isKey(value) && !copy[value]) {\r\n                    copy = Object.assign(Object.assign({}, copy), { [value]: [] });\r\n                }\r\n            }\r\n            return copy;\r\n        }\r\n        return data;\r\n    }\r\n    function getValues(payload) {\r\n        if (isString(payload)) {\r\n            return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\r\n        }\r\n        if (Array.isArray(payload)) {\r\n            const data = {};\r\n            for (const name of payload) {\r\n                set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\r\n            }\r\n            return data;\r\n        }\r\n        return setFieldArrayDefaultValues(getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current, isWeb), shouldUnregister));\r\n    }\r\n    const validateResolver = useCallback(async (values = {}) => {\r\n        const { errors } = await resolverRef.current(Object.assign(Object.assign(Object.assign({}, defaultValuesRef.current), getValues()), values), contextRef.current, isValidateAllFieldCriteria);\r\n        const isValid = isEmptyObject(errors);\r\n        formStateRef.current.isValid !== isValid &&\r\n            updateFormState({\r\n                isValid,\r\n            });\r\n    }, [isValidateAllFieldCriteria]);\r\n    const removeFieldEventListener = useCallback((field, forceDelete) => findRemovedFieldAndRemoveListener(fieldsRef, handleChangeRef.current, field, shallowFieldsStateRef, shouldUnregister, forceDelete), [shouldUnregister]);\r\n    const updateWatchedValue = useCallback((name) => {\r\n        if (isWatchAllRef.current) {\r\n            updateFormState();\r\n        }\r\n        else if (watchFieldsRef) {\r\n            for (const watchField of watchFieldsRef.current) {\r\n                if (watchField.startsWith(name)) {\r\n                    updateFormState();\r\n                    break;\r\n                }\r\n            }\r\n            renderWatchedInputs(name);\r\n        }\r\n    }, []);\r\n    const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\r\n        if (field) {\r\n            removeFieldEventListener(field, forceDelete);\r\n            if (shouldUnregister && !compact(field.options || []).length) {\r\n                unset(defaultValuesAtRenderRef.current, field.ref.name);\r\n                unset(validFieldsRef.current, field.ref.name);\r\n                unset(fieldsWithValidationRef.current, field.ref.name);\r\n                unset(formStateRef.current.errors, field.ref.name);\r\n                set(formStateRef.current.dirtyFields, field.ref.name, true);\r\n                updateFormState({\r\n                    errors: formStateRef.current.errors,\r\n                    isDirty: isFormDirty(),\r\n                    dirtyFields: formStateRef.current.dirtyFields,\r\n                });\r\n                readFormStateRef.current.isValid &&\r\n                    resolverRef.current &&\r\n                    validateResolver();\r\n                updateWatchedValue(field.ref.name);\r\n            }\r\n        }\r\n    }, [validateResolver, removeFieldEventListener]);\r\n    function clearErrors(name) {\r\n        name &&\r\n            (Array.isArray(name) ? name : [name]).forEach((inputName) => fieldsRef.current[inputName] && isKey(inputName)\r\n                ? delete formStateRef.current.errors[inputName]\r\n                : unset(formStateRef.current.errors, inputName));\r\n        updateFormState({\r\n            errors: name ? formStateRef.current.errors : {},\r\n        });\r\n    }\r\n    function setError(name, error) {\r\n        const ref = (fieldsRef.current[name] || {}).ref;\r\n        set(formStateRef.current.errors, name, Object.assign(Object.assign({}, error), { ref }));\r\n        updateFormState({\r\n            isValid: false,\r\n            errors: formStateRef.current.errors,\r\n        });\r\n        error.shouldFocus && ref && ref.focus && ref.focus();\r\n    }\r\n    const watchInternal = useCallback((fieldNames, defaultValue, watchId) => {\r\n        const watchFields = watchId\r\n            ? useWatchFieldsRef.current[watchId]\r\n            : watchFieldsRef.current;\r\n        const combinedDefaultValues = isUndefined(defaultValue)\r\n            ? defaultValuesRef.current\r\n            : defaultValue;\r\n        let fieldValues = getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current, isWeb), shouldUnregister, false, fieldNames);\r\n        if (isString(fieldNames)) {\r\n            if (fieldArrayNamesRef.current.has(fieldNames)) {\r\n                const fieldArrayValue = get(fieldArrayValuesRef.current, fieldNames, []);\r\n                fieldValues =\r\n                    fieldArrayValue.length !==\r\n                        compact(get(fieldValues, fieldNames, [])).length ||\r\n                        !fieldArrayValue.length\r\n                        ? fieldArrayValuesRef.current\r\n                        : fieldValues;\r\n            }\r\n            return assignWatchFields(fieldValues, fieldNames, watchFields, isUndefined(defaultValue)\r\n                ? get(combinedDefaultValues, fieldNames)\r\n                : defaultValue, true);\r\n        }\r\n        if (Array.isArray(fieldNames)) {\r\n            return fieldNames.reduce((previous, name) => (Object.assign(Object.assign({}, previous), { [name]: assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues) })), {});\r\n        }\r\n        isWatchAllRef.current = isUndefined(watchId);\r\n        return transformToNestObject((!isEmptyObject(fieldValues) && fieldValues) ||\r\n            combinedDefaultValues);\r\n    }, []);\r\n    function watch(fieldNames, defaultValue) {\r\n        return watchInternal(fieldNames, defaultValue);\r\n    }\r\n    function unregister(name) {\r\n        for (const fieldName of Array.isArray(name) ? name : [name]) {\r\n            removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\r\n        }\r\n    }\r\n    function registerFieldRef(ref, validateOptions = {}) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!ref.name) {\r\n                return console.warn('📋 Field is missing `name` attribute', ref, `https://react-hook-form.com/api#useForm`);\r\n            }\r\n            if (fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\r\n                !RegExp(`^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\r\n                    .replace(/\\[/g, '\\\\[')\r\n                    .replace(/\\]/g, '\\\\]')).test(ref.name)) {\r\n                return console.warn('📋 `name` prop should be in object shape: name=\"test[index].name\"', ref, 'https://react-hook-form.com/api#useFieldArray');\r\n            }\r\n        }\r\n        const { name, type, value } = ref;\r\n        const fieldRefAndValidationOptions = Object.assign({ ref }, validateOptions);\r\n        const fields = fieldsRef.current;\r\n        const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\r\n        const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n        const compareRef = (currentRef) => isWeb && (!isHTMLElement(ref) || currentRef === ref);\r\n        let field = fields[name];\r\n        let isEmptyDefaultValue = true;\r\n        let defaultValue;\r\n        if (field &&\r\n            (isRadioOrCheckbox\r\n                ? Array.isArray(field.options) &&\r\n                    compact(field.options).find((option) => {\r\n                        return value === option.ref.value && compareRef(option.ref);\r\n                    })\r\n                : compareRef(field.ref))) {\r\n            fields[name] = Object.assign(Object.assign({}, field), validateOptions);\r\n            return;\r\n        }\r\n        if (type) {\r\n            field = isRadioOrCheckbox\r\n                ? Object.assign({ options: [\r\n                        ...compact((field && field.options) || []),\r\n                        {\r\n                            ref,\r\n                        },\r\n                    ], ref: { type, name } }, validateOptions) : Object.assign({}, fieldRefAndValidationOptions);\r\n        }\r\n        else {\r\n            field = fieldRefAndValidationOptions;\r\n        }\r\n        fields[name] = field;\r\n        const isEmptyUnmountFields = isUndefined(get(shallowFieldsStateRef.current, name));\r\n        if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\r\n            defaultValue = get(isEmptyUnmountFields\r\n                ? defaultValuesRef.current\r\n                : shallowFieldsStateRef.current, name);\r\n            isEmptyDefaultValue = isUndefined(defaultValue);\r\n            if (!isEmptyDefaultValue && !isFieldArray) {\r\n                setFieldValue(name, defaultValue);\r\n            }\r\n        }\r\n        if (!isEmptyObject(validateOptions)) {\r\n            set(fieldsWithValidationRef.current, name, true);\r\n            if (!isOnSubmit && readFormStateRef.current.isValid) {\r\n                validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef).then((error) => {\r\n                    const previousFormIsValid = formStateRef.current.isValid;\r\n                    isEmptyObject(error)\r\n                        ? set(validFieldsRef.current, name, true)\r\n                        : unset(validFieldsRef.current, name);\r\n                    if (previousFormIsValid !== isEmptyObject(error)) {\r\n                        updateFormState();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (!defaultValuesAtRenderRef.current[name] &&\r\n            !(isFieldArray && isEmptyDefaultValue)) {\r\n            const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\r\n            set(defaultValuesAtRenderRef.current, name, isEmptyDefaultValue\r\n                ? isObject(fieldValue)\r\n                    ? Object.assign({}, fieldValue) : fieldValue\r\n                : defaultValue);\r\n            !isFieldArray && unset(formStateRef.current.dirtyFields, name);\r\n        }\r\n        if (type) {\r\n            attachEventListeners(isRadioOrCheckbox && field.options\r\n                ? field.options[field.options.length - 1]\r\n                : field, isRadioOrCheckbox || isSelectInput(ref), handleChangeRef.current);\r\n        }\r\n    }\r\n    function register(refOrValidationOptions, rules) {\r\n        if (!isWindowUndefined) {\r\n            if (isString(refOrValidationOptions)) {\r\n                registerFieldRef({ name: refOrValidationOptions }, rules);\r\n            }\r\n            else if (isObject(refOrValidationOptions) &&\r\n                'name' in refOrValidationOptions) {\r\n                registerFieldRef(refOrValidationOptions, rules);\r\n            }\r\n            else {\r\n                return (ref) => ref && registerFieldRef(ref, refOrValidationOptions);\r\n            }\r\n        }\r\n    }\r\n    const handleSubmit = useCallback((onValid, onInvalid) => async (e) => {\r\n        if (e && e.preventDefault) {\r\n            e.preventDefault();\r\n            e.persist();\r\n        }\r\n        let fieldErrors = {};\r\n        let fieldValues = setFieldArrayDefaultValues(getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current, isWeb), shouldUnregister, true));\r\n        readFormStateRef.current.isSubmitting &&\r\n            updateFormState({\r\n                isSubmitting: true,\r\n            });\r\n        try {\r\n            if (resolverRef.current) {\r\n                const { errors, values } = await resolverRef.current(fieldValues, contextRef.current, isValidateAllFieldCriteria);\r\n                formStateRef.current.errors = fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                for (const field of Object.values(fieldsRef.current)) {\r\n                    if (field) {\r\n                        const { ref: { name }, } = field;\r\n                        const fieldError = await validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef);\r\n                        if (fieldError[name]) {\r\n                            set(fieldErrors, name, fieldError[name]);\r\n                            unset(validFieldsRef.current, name);\r\n                        }\r\n                        else if (get(fieldsWithValidationRef.current, name)) {\r\n                            unset(formStateRef.current.errors, name);\r\n                            set(validFieldsRef.current, name, true);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (isEmptyObject(fieldErrors) &&\r\n                Object.keys(formStateRef.current.errors).every((name) => name in fieldsRef.current)) {\r\n                updateFormState({\r\n                    errors: {},\r\n                    isSubmitting: true,\r\n                });\r\n                await onValid(fieldValues, e);\r\n            }\r\n            else {\r\n                formStateRef.current.errors = Object.assign(Object.assign({}, formStateRef.current.errors), fieldErrors);\r\n                onInvalid && (await onInvalid(formStateRef.current.errors, e));\r\n                shouldFocusError &&\r\n                    focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\r\n            }\r\n        }\r\n        finally {\r\n            formStateRef.current.isSubmitting = false;\r\n            updateFormState({\r\n                isSubmitted: true,\r\n                isSubmitting: false,\r\n                isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\r\n                errors: formStateRef.current.errors,\r\n                submitCount: formStateRef.current.submitCount + 1,\r\n            });\r\n        }\r\n    }, [shouldFocusError, isValidateAllFieldCriteria]);\r\n    const resetRefs = ({ errors, isDirty, isSubmitted, touched, isValid, submitCount, dirtyFields, }) => {\r\n        if (!isValid) {\r\n            validFieldsRef.current = {};\r\n            fieldsWithValidationRef.current = {};\r\n        }\r\n        defaultValuesAtRenderRef.current = {};\r\n        fieldArrayDefaultValuesRef.current = {};\r\n        watchFieldsRef.current = new Set();\r\n        isWatchAllRef.current = false;\r\n        updateFormState({\r\n            submitCount: submitCount ? formStateRef.current.submitCount : 0,\r\n            isDirty: isDirty ? formStateRef.current.isDirty : false,\r\n            isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\r\n            isValid: isValid ? formStateRef.current.isValid : false,\r\n            dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\r\n            touched: touched ? formStateRef.current.touched : {},\r\n            errors: errors ? formStateRef.current.errors : {},\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: false,\r\n        });\r\n    };\r\n    const reset = (values, omitResetState = {}) => {\r\n        if (isWeb) {\r\n            for (const field of Object.values(fieldsRef.current)) {\r\n                if (field) {\r\n                    const { ref, options } = field;\r\n                    const inputRef = isRadioOrCheckboxFunction(ref) && Array.isArray(options)\r\n                        ? options[0].ref\r\n                        : ref;\r\n                    if (isHTMLElement(inputRef)) {\r\n                        try {\r\n                            inputRef.closest('form').reset();\r\n                            break;\r\n                        }\r\n                        catch (_a) { }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        fieldsRef.current = {};\r\n        defaultValuesRef.current = cloneObject(values || defaultValuesRef.current, isWeb);\r\n        values && renderWatchedInputs('');\r\n        Object.values(resetFieldArrayFunctionRef.current).forEach((resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray());\r\n        shallowFieldsStateRef.current = shouldUnregister\r\n            ? {}\r\n            : cloneObject(values, isWeb) || {};\r\n        resetRefs(omitResetState);\r\n    };\r\n    useEffect(() => {\r\n        resolver && readFormStateRef.current.isValid && validateResolver();\r\n        observerRef.current =\r\n            observerRef.current || !isWeb\r\n                ? observerRef.current\r\n                : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\r\n    }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\r\n    useEffect(() => () => {\r\n        isUnMount.current = true;\r\n        observerRef.current && observerRef.current.disconnect();\r\n        Object.values(fieldsRef.current).forEach((field) => removeFieldEventListenerAndRef(field, true));\r\n    }, []);\r\n    if (!resolver && readFormStateRef.current.isValid) {\r\n        formState.isValid =\r\n            deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\r\n                isEmptyObject(formStateRef.current.errors);\r\n    }\r\n    const commonProps = {\r\n        trigger,\r\n        setValue: useCallback(setValue, [setInternalValue, trigger]),\r\n        getValues: useCallback(getValues, []),\r\n        register: useCallback(register, [defaultValuesRef.current]),\r\n        unregister: useCallback(unregister, []),\r\n    };\r\n    const control = useMemo(() => (Object.assign({ isFormDirty,\r\n        updateWatchedValue,\r\n        shouldUnregister,\r\n        updateFormState,\r\n        removeFieldEventListener,\r\n        watchInternal, mode: modeRef.current, reValidateMode: {\r\n            isReValidateOnBlur,\r\n            isReValidateOnChange,\r\n        }, validateResolver: resolver ? validateResolver : undefined, fieldsRef,\r\n        resetFieldArrayFunctionRef,\r\n        useWatchFieldsRef,\r\n        useWatchRenderFunctionsRef,\r\n        fieldArrayDefaultValuesRef,\r\n        validFieldsRef,\r\n        fieldsWithValidationRef,\r\n        fieldArrayNamesRef,\r\n        readFormStateRef,\r\n        formStateRef,\r\n        defaultValuesRef,\r\n        shallowFieldsStateRef,\r\n        fieldArrayValuesRef }, commonProps)), [\r\n        defaultValuesRef.current,\r\n        updateWatchedValue,\r\n        shouldUnregister,\r\n        removeFieldEventListener,\r\n        watchInternal,\r\n    ]);\r\n    return Object.assign({ watch,\r\n        control, formState: isProxyEnabled\r\n            ? new Proxy(formState, {\r\n                get: (obj, prop) => {\r\n                    if (process.env.NODE_ENV !== 'production') {\r\n                        if (prop === 'isValid' && isOnSubmit) {\r\n                            console.warn('📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState');\r\n                        }\r\n                    }\r\n                    if (prop in obj) {\r\n                        readFormStateRef.current[prop] = true;\r\n                        return obj[prop];\r\n                    }\r\n                    return undefined;\r\n                },\r\n            })\r\n            : formState, handleSubmit, reset: useCallback(reset, []), clearErrors: useCallback(clearErrors, []), setError: useCallback(setError, []), errors: formState.errors }, commonProps);\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nconst FormContext = createContext(null);\r\nFormContext.displayName = 'RHFContext';\r\nconst useFormContext = () => useContext(FormContext);\r\nconst FormProvider = (_a) => {\r\n    var { children } = _a, props = __rest(_a, [\"children\"]);\r\n    return (createElement(FormContext.Provider, { value: Object.assign({}, props) }, children));\r\n};\n\nvar generateId = () => {\r\n    const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nconst removeAt = (data, index) => [\r\n    ...data.slice(0, index),\r\n    ...data.slice(index + 1),\r\n];\r\nfunction removeAtIndexes(data, index) {\r\n    let k = -1;\r\n    while (++k < data.length) {\r\n        if (index.indexOf(k) >= 0) {\r\n            delete data[k];\r\n        }\r\n    }\r\n    return compact(data);\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : Array.isArray(index)\r\n        ? removeAtIndexes(data, index)\r\n        : removeAt(data, index);\n\nvar moveArrayAt = (data, from, to) => {\r\n    if (Array.isArray(data)) {\r\n        if (isUndefined(data[to])) {\r\n            data[to] = undefined;\r\n        }\r\n        data.splice(to, 0, data.splice(from, 1)[0]);\r\n        return data;\r\n    }\r\n    return [];\r\n};\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    const temp = [data[indexB], data[indexA]];\r\n    data[indexA] = temp[0];\r\n    data[indexB] = temp[1];\r\n};\n\nfunction prepend(data, value) {\r\n    return [...(Array.isArray(value) ? value : [value || undefined]), ...data];\r\n}\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...(Array.isArray(value) ? value : [value || undefined]),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n\nfunction mapValueToBoolean(value) {\r\n    if (isObject(value)) {\r\n        const object = {};\r\n        for (const key in value) {\r\n            object[key] = true;\r\n        }\r\n        return [object];\r\n    }\r\n    return [true];\r\n}\r\nvar fillBooleanArray = (value) => (Array.isArray(value) ? value : [value])\r\n    .map(mapValueToBoolean)\r\n    .flat();\n\nconst mapIds = (values = [], keyName) => {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        for (const value of values) {\r\n            if (!!value && keyName in value) {\r\n                console.warn(`📋 useFieldArray fieldValues contain the keyName \\`${keyName}\\` which is reserved for use by useFieldArray. https://react-hook-form.com/api#useFieldArray`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return values.map((value) => (Object.assign({ [keyName]: generateId() }, value)));\r\n};\r\nconst useFieldArray = ({ control, name, keyName = 'id', }) => {\r\n    const methods = useFormContext();\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (!control && !methods) {\r\n            throw new Error('📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray');\r\n        }\r\n    }\r\n    const focusIndexRef = useRef(-1);\r\n    const { isFormDirty, updateWatchedValue, resetFieldArrayFunctionRef, fieldArrayNamesRef, fieldsRef, defaultValuesRef, removeFieldEventListener, formStateRef, shallowFieldsStateRef, updateFormState, readFormStateRef, validFieldsRef, fieldsWithValidationRef, fieldArrayDefaultValuesRef, validateResolver, getValues, shouldUnregister, fieldArrayValuesRef, } = control || methods.control;\r\n    const fieldArrayParentName = getFieldArrayParentName(name);\r\n    const memoizedDefaultValues = useRef([\r\n        ...(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\r\n            ? get(fieldArrayDefaultValuesRef.current, name, [])\r\n            : get(shouldUnregister\r\n                ? defaultValuesRef.current\r\n                : shallowFieldsStateRef.current, name, [])),\r\n    ]);\r\n    const [fields, setFields] = useState(mapIds(memoizedDefaultValues.current, keyName));\r\n    set(fieldArrayValuesRef.current, name, fields);\r\n    const getFieldArrayValue = useCallback(() => get(fieldArrayValuesRef.current, name, []), []);\r\n    const getCurrentFieldsValues = () => get(getValues(), name, getFieldArrayValue()).map((item, index) => (Object.assign(Object.assign({}, getFieldArrayValue()[index]), item)));\r\n    fieldArrayNamesRef.current.add(name);\r\n    if (fieldArrayParentName &&\r\n        !get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)) {\r\n        set(fieldArrayDefaultValuesRef.current, fieldArrayParentName, get(defaultValuesRef.current, fieldArrayParentName));\r\n    }\r\n    const setFieldAndValidState = (fieldsValues) => {\r\n        setFields(fieldsValues);\r\n        set(fieldArrayValuesRef.current, name, fieldsValues);\r\n        if (readFormStateRef.current.isValid && validateResolver) {\r\n            const values = getValues();\r\n            set(values, name, fieldsValues);\r\n            validateResolver(values);\r\n        }\r\n    };\r\n    const resetFields = () => {\r\n        for (const key in fieldsRef.current) {\r\n            isMatchFieldArrayName(key, name) &&\r\n                removeFieldEventListener(fieldsRef.current[key], true);\r\n        }\r\n    };\r\n    const cleanup = (ref) => !compact(get(ref, name, [])).length && unset(ref, name);\r\n    const updateDirtyFieldsWithDefaultValues = (updatedFieldArrayValues) => {\r\n        const defaultFieldArrayValues = get(defaultValuesRef.current, name, []);\r\n        const updateDirtyFieldsBaseOnDefaultValues = (base, target) => {\r\n            for (const key in base) {\r\n                for (const innerKey in base[key]) {\r\n                    if (innerKey !== keyName &&\r\n                        (!target[key] ||\r\n                            !base[key] ||\r\n                            base[key][innerKey] !== target[key][innerKey])) {\r\n                        set(formStateRef.current.dirtyFields, `${name}[${key}]`, Object.assign(Object.assign({}, get(formStateRef.current.dirtyFields, `${name}[${key}]`, {})), { [innerKey]: true }));\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        if (updatedFieldArrayValues) {\r\n            updateDirtyFieldsBaseOnDefaultValues(defaultFieldArrayValues, updatedFieldArrayValues);\r\n            updateDirtyFieldsBaseOnDefaultValues(updatedFieldArrayValues, defaultFieldArrayValues);\r\n        }\r\n    };\r\n    const batchStateUpdate = (method, args, updatedFieldValues, updatedFormValues = [], shouldSet = true, shouldUpdateValid = false) => {\r\n        if (get(shallowFieldsStateRef.current, name)) {\r\n            const output = method(get(shallowFieldsStateRef.current, name), args.argA, args.argB);\r\n            shouldSet && set(shallowFieldsStateRef.current, name, output);\r\n        }\r\n        if (get(fieldArrayDefaultValuesRef.current, name)) {\r\n            const output = method(get(fieldArrayDefaultValuesRef.current, name), args.argA, args.argB);\r\n            shouldSet && set(fieldArrayDefaultValuesRef.current, name, output);\r\n            cleanup(fieldArrayDefaultValuesRef.current);\r\n        }\r\n        if (Array.isArray(get(formStateRef.current.errors, name))) {\r\n            const output = method(get(formStateRef.current.errors, name), args.argA, args.argB);\r\n            shouldSet && set(formStateRef.current.errors, name, output);\r\n            cleanup(formStateRef.current.errors);\r\n        }\r\n        if (readFormStateRef.current.touched &&\r\n            get(formStateRef.current.touched, name)) {\r\n            const output = method(get(formStateRef.current.touched, name), args.argA, args.argB);\r\n            shouldSet && set(formStateRef.current.touched, name, output);\r\n            cleanup(formStateRef.current.touched);\r\n        }\r\n        if (readFormStateRef.current.dirtyFields ||\r\n            readFormStateRef.current.isDirty) {\r\n            const output = method(get(formStateRef.current.dirtyFields, name, []), args.argC, args.argD);\r\n            shouldSet && set(formStateRef.current.dirtyFields, name, output);\r\n            updateDirtyFieldsWithDefaultValues(updatedFieldValues);\r\n            cleanup(formStateRef.current.dirtyFields);\r\n        }\r\n        if (shouldUpdateValid &&\r\n            readFormStateRef.current.isValid &&\r\n            !validateResolver) {\r\n            set(validFieldsRef.current, name, method(get(validFieldsRef.current, name, []), args.argA));\r\n            cleanup(validFieldsRef.current);\r\n            set(fieldsWithValidationRef.current, name, method(get(fieldsWithValidationRef.current, name, []), args.argA));\r\n            cleanup(fieldsWithValidationRef.current);\r\n        }\r\n        updateFormState({\r\n            errors: formStateRef.current.errors,\r\n            dirtyFields: formStateRef.current.dirtyFields,\r\n            isDirty: isFormDirty(name, updatedFormValues.map((_a = {}) => {\r\n                var _b = keyName, omitted = _a[_b], rest = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\r\n                return rest;\r\n            })),\r\n            touched: formStateRef.current.touched,\r\n        });\r\n    };\r\n    const append = (value, shouldFocus = true) => {\r\n        const updateFormValues = [\r\n            ...getFieldArrayValue(),\r\n            ...mapIds(Array.isArray(value) ? value : [value], keyName),\r\n        ];\r\n        setFieldAndValidState(updateFormValues);\r\n        if (readFormStateRef.current.dirtyFields ||\r\n            readFormStateRef.current.isDirty) {\r\n            updateDirtyFieldsWithDefaultValues(updateFormValues);\r\n            updateFormState({\r\n                isDirty: true,\r\n                dirtyFields: formStateRef.current.dirtyFields,\r\n            });\r\n        }\r\n        !shouldUnregister &&\r\n            set(shallowFieldsStateRef.current, name, [\r\n                ...(get(shallowFieldsStateRef.current, name) || []),\r\n                value,\r\n            ]);\r\n        focusIndexRef.current = shouldFocus ? fields.length : -1;\r\n    };\r\n    const prepend$1 = (value, shouldFocus = true) => {\r\n        const emptyArray = fillEmptyArray(value);\r\n        const updatedFieldArrayValues = prepend(getCurrentFieldsValues(), mapIds(Array.isArray(value) ? value : [value], keyName));\r\n        setFieldAndValidState(updatedFieldArrayValues);\r\n        resetFields();\r\n        batchStateUpdate(prepend, {\r\n            argA: emptyArray,\r\n            argC: fillBooleanArray(value),\r\n        }, updatedFieldArrayValues);\r\n        focusIndexRef.current = shouldFocus ? 0 : -1;\r\n    };\r\n    const remove = (index) => {\r\n        const fieldValues = getCurrentFieldsValues();\r\n        const updatedFieldValues = removeArrayAt(fieldValues, index);\r\n        setFieldAndValidState(updatedFieldValues);\r\n        resetFields();\r\n        batchStateUpdate(removeArrayAt, {\r\n            argA: index,\r\n            argC: index,\r\n        }, updatedFieldValues, removeArrayAt(fieldValues, index), true, true);\r\n    };\r\n    const insert$1 = (index, value, shouldFocus = true) => {\r\n        const emptyArray = fillEmptyArray(value);\r\n        const fieldValues = getCurrentFieldsValues();\r\n        const updatedFieldArrayValues = insert(fieldValues, index, mapIds(Array.isArray(value) ? value : [value], keyName));\r\n        setFieldAndValidState(updatedFieldArrayValues);\r\n        resetFields();\r\n        batchStateUpdate(insert, {\r\n            argA: index,\r\n            argB: emptyArray,\r\n            argC: index,\r\n            argD: fillBooleanArray(value),\r\n        }, updatedFieldArrayValues, insert(fieldValues, index));\r\n        focusIndexRef.current = shouldFocus ? index : -1;\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const fieldValues = getCurrentFieldsValues();\r\n        swapArrayAt(fieldValues, indexA, indexB);\r\n        resetFields();\r\n        setFieldAndValidState([...fieldValues]);\r\n        batchStateUpdate(swapArrayAt, {\r\n            argA: indexA,\r\n            argB: indexB,\r\n            argC: indexA,\r\n            argD: indexB,\r\n        }, undefined, fieldValues, false);\r\n    };\r\n    const move = (from, to) => {\r\n        const fieldValues = getCurrentFieldsValues();\r\n        moveArrayAt(fieldValues, from, to);\r\n        resetFields();\r\n        setFieldAndValidState([...fieldValues]);\r\n        batchStateUpdate(moveArrayAt, {\r\n            argA: from,\r\n            argB: to,\r\n            argC: from,\r\n            argD: to,\r\n        }, undefined, fieldValues, false);\r\n    };\r\n    useEffect(() => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!name) {\r\n                console.warn('📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray');\r\n            }\r\n        }\r\n        const defaultValues = get(fieldArrayDefaultValuesRef.current, name);\r\n        if (defaultValues && fields.length < defaultValues.length) {\r\n            defaultValues.pop();\r\n            set(fieldArrayDefaultValuesRef.current, name, defaultValues);\r\n        }\r\n        updateWatchedValue(name);\r\n        if (focusIndexRef.current > -1) {\r\n            for (const key in fieldsRef.current) {\r\n                const field = fieldsRef.current[key];\r\n                if (key.startsWith(`${name}[${focusIndexRef.current}]`) &&\r\n                    field.ref.focus) {\r\n                    field.ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        focusIndexRef.current = -1;\r\n    }, [fields, name]);\r\n    useEffect(() => {\r\n        const resetFunctions = resetFieldArrayFunctionRef.current;\r\n        const fieldArrayNames = fieldArrayNamesRef.current;\r\n        if (!getFieldArrayParentName(name)) {\r\n            resetFunctions[name] = (data) => {\r\n                resetFields();\r\n                !data && unset(fieldArrayDefaultValuesRef.current, name);\r\n                unset(shallowFieldsStateRef.current, name);\r\n                memoizedDefaultValues.current = get(data || defaultValuesRef.current, name);\r\n                setFields(mapIds(memoizedDefaultValues.current, keyName));\r\n            };\r\n        }\r\n        return () => {\r\n            resetFields();\r\n            delete resetFunctions[name];\r\n            unset(fieldArrayValuesRef, name);\r\n            fieldArrayNames.delete(name);\r\n        };\r\n    }, []);\r\n    return {\r\n        swap: useCallback(swap, [name]),\r\n        move: useCallback(move, [name]),\r\n        prepend: useCallback(prepend$1, [name]),\r\n        append: useCallback(append, [name, fields]),\r\n        remove: useCallback(remove, [name]),\r\n        insert: useCallback(insert$1, [name]),\r\n        fields,\r\n    };\r\n};\n\nfunction useWatch({ control, name, defaultValue, }) {\r\n    const methods = useFormContext();\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (!control && !methods) {\r\n            throw new Error('📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch');\r\n        }\r\n    }\r\n    const { useWatchFieldsRef, useWatchRenderFunctionsRef, watchInternal, defaultValuesRef, } = control || methods.control;\r\n    const updateValue = useState()[1];\r\n    const idRef = useRef();\r\n    const defaultValueRef = useRef(defaultValue);\r\n    useEffect(() => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (name === '') {\r\n                console.warn('📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch');\r\n            }\r\n        }\r\n        const id = (idRef.current = generateId());\r\n        const watchFieldsHookRender = useWatchRenderFunctionsRef.current;\r\n        const watchFieldsHook = useWatchFieldsRef.current;\r\n        watchFieldsHook[id] = new Set();\r\n        watchFieldsHookRender[id] = () => updateValue({});\r\n        watchInternal(name, defaultValueRef.current, id);\r\n        return () => {\r\n            delete watchFieldsHook[id];\r\n            delete watchFieldsHookRender[id];\r\n        };\r\n    }, [\r\n        name,\r\n        useWatchRenderFunctionsRef,\r\n        useWatchFieldsRef,\r\n        watchInternal,\r\n        defaultValueRef,\r\n    ]);\r\n    return idRef.current\r\n        ? watchInternal(name, defaultValueRef.current, idRef.current)\r\n        : isUndefined(defaultValue)\r\n            ? isString(name)\r\n                ? get(defaultValuesRef.current, name)\r\n                : Array.isArray(name)\r\n                    ? name.reduce((previous, inputName) => (Object.assign(Object.assign({}, previous), { [inputName]: get(defaultValuesRef.current, inputName) })), {})\r\n                    : defaultValuesRef.current\r\n            : defaultValue;\r\n}\n\nvar getInputValue = (event) => isPrimitive(event) ||\r\n    !isObject(event.target) ||\r\n    (isObject(event.target) && !event.type)\r\n    ? event\r\n    : isUndefined(event.target.value)\r\n        ? event.target.checked\r\n        : event.target.value;\n\nconst Controller = (_a) => {\r\n    var { name, rules, as, render, defaultValue, control, onFocus } = _a, rest = __rest(_a, [\"name\", \"rules\", \"as\", \"render\", \"defaultValue\", \"control\", \"onFocus\"]);\r\n    const methods = useFormContext();\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (!control && !methods) {\r\n            throw new Error('📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller');\r\n        }\r\n    }\r\n    const { defaultValuesRef, setValue, register, unregister, trigger, mode, reValidateMode: { isReValidateOnBlur, isReValidateOnChange }, formStateRef: { current: { isSubmitted, touched }, }, updateFormState, readFormStateRef, fieldsRef, fieldArrayNamesRef, shallowFieldsStateRef, } = control || methods.control;\r\n    const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n    const getInitialValue = () => !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\r\n        ? get(shallowFieldsStateRef.current, name)\r\n        : isUndefined(defaultValue)\r\n            ? get(defaultValuesRef.current, name)\r\n            : defaultValue;\r\n    const [value, setInputStateValue] = useState(getInitialValue());\r\n    const valueRef = useRef(value);\r\n    const ref = useRef({\r\n        focus: () => null,\r\n    });\r\n    const onFocusRef = useRef(onFocus ||\r\n        (() => {\r\n            if (isFunction(ref.current.focus)) {\r\n                ref.current.focus();\r\n            }\r\n            else {\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    console.warn(`📋 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method`);\r\n                }\r\n            }\r\n        }));\r\n    const shouldValidate = useCallback((isBlurEvent) => !skipValidation(Object.assign({ isBlurEvent,\r\n        isReValidateOnBlur,\r\n        isReValidateOnChange,\r\n        isSubmitted, isTouched: !!get(touched, name) }, mode)), [\r\n        isReValidateOnBlur,\r\n        isReValidateOnChange,\r\n        isSubmitted,\r\n        touched,\r\n        name,\r\n        mode,\r\n    ]);\r\n    const commonTask = useCallback(([event]) => {\r\n        const data = getInputValue(event);\r\n        setInputStateValue(data);\r\n        valueRef.current = data;\r\n        return data;\r\n    }, []);\r\n    const registerField = useCallback((shouldUpdateValue) => {\r\n        if (process.env.NODE_ENV !== 'production' && !name) {\r\n            return console.warn('📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller');\r\n        }\r\n        if (fieldsRef.current[name]) {\r\n            fieldsRef.current[name] = Object.assign({ ref: fieldsRef.current[name].ref }, rules);\r\n        }\r\n        else {\r\n            register(Object.defineProperty({\r\n                name,\r\n                focus: onFocusRef.current,\r\n            }, 'value', {\r\n                set(data) {\r\n                    setInputStateValue(data);\r\n                    valueRef.current = data;\r\n                },\r\n                get() {\r\n                    return valueRef.current;\r\n                },\r\n            }), rules);\r\n            shouldUpdateValue = !get(defaultValuesRef.current, name);\r\n        }\r\n        shouldUpdateValue &&\r\n            isNotFieldArray &&\r\n            setInputStateValue(getInitialValue());\r\n    }, [rules, name, register]);\r\n    useEffect(() => () => unregister(name), [unregister, name]);\r\n    useEffect(() => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (isUndefined(value)) {\r\n                console.warn(`📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`);\r\n            }\r\n            if ((!as && !render) || (as && render)) {\r\n                console.warn(`📋 ${name} Controller should use either the 'as' or 'render' prop, not both. https://react-hook-form.com/api#Controller`);\r\n            }\r\n            if (!isNotFieldArray && isUndefined(defaultValue)) {\r\n                console.warn('📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller');\r\n            }\r\n        }\r\n        registerField();\r\n    }, [registerField]);\r\n    useEffect(() => {\r\n        !fieldsRef.current[name] && registerField(true);\r\n    });\r\n    const onBlur = useCallback(() => {\r\n        if (readFormStateRef.current.touched && !get(touched, name)) {\r\n            set(touched, name, true);\r\n            updateFormState({\r\n                touched,\r\n            });\r\n        }\r\n        shouldValidate(true) && trigger(name);\r\n    }, [\r\n        name,\r\n        touched,\r\n        updateFormState,\r\n        shouldValidate,\r\n        trigger,\r\n        readFormStateRef,\r\n    ]);\r\n    const onChange = useCallback((...event) => setValue(name, commonTask(event), {\r\n        shouldValidate: shouldValidate(),\r\n        shouldDirty: true,\r\n    }), [setValue, name, shouldValidate]);\r\n    const commonProps = {\r\n        onChange,\r\n        onBlur,\r\n        name,\r\n        value,\r\n        ref,\r\n    };\r\n    const props = Object.assign(Object.assign({}, rest), commonProps);\r\n    return as\r\n        ? isValidElement(as)\r\n            ? cloneElement(as, props)\r\n            : createElement(as, props)\r\n        : render\r\n            ? render(commonProps)\r\n            : null;\r\n};\n\nexport { Controller, FormProvider, appendErrors, get, transformToNestObject, useFieldArray, useForm, useFormContext, useWatch };\n//# sourceMappingURL=index.esm.js.map\n","export * from 'react-hook-form'\n"],"sourceRoot":""}