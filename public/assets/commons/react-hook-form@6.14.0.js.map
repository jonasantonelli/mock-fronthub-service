{"version":3,"sources":["webpack://[name]/webpack/bootstrap","webpack://[name]/external \"react@17.0.1\"","webpack://[name]/./node_modules/react-hook-form/dist/index.esm.js","webpack://[name]/./src/react-hook-form.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","isHTMLElement","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","isNullOrUndefined","isObjectType","isObject","Array","isArray","Date","isKey","test","compact","filter","Boolean","stringToPath","input","replace","split","set","path","index","tempPath","length","lastIndex","newValue","objValue","isNaN","transformToNestObject","data","isUndefined","val","undefined","obj","defaultValue","result","reduce","removeAllEventListeners","ref","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","getRadioValue","options","previous","option","checked","isRadioInput","element","type","isFileInput","isCheckBoxInput","isMultipleSelect","defaultResult","validResult","getCheckboxValue","values","map","attributes","getFieldValue","fieldsRef","shallowFieldsStateRef","excludeDisabled","field","current","disabled","valueAsNumber","valueAsDate","setValueAs","files","selected","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","isEmptyObject","keys","isBoolean","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isSameRef","fieldValue","isPrimitive","deepMerge","target","source","targetValue","sourceValue","_a","setDirtyFields","defaultValues","dirtyFields","parentName","assign","setFieldArrayDirtyFields","isString","getFieldsValues","shallowFieldsState","shouldUnregister","search","output","startsWith","find","deepEqual","object1","object2","isErrorObject","keys1","keys2","val1","val2","isRegex","RegExp","getValueAndMessage","validationData","message","isFunction","isMessage","getValidateError","appendErrors","validateAllFieldCriteria","errors","types","validateField","async","required","maxLength","minLength","min","max","pattern","validate","error","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","validateRef","validateError","validationResult","validateFunction","entries","getPath","rootPath","paths","rootName","push","assignWatchFields","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","forEach","skipValidation","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","getFieldArrayParentName","substring","indexOf","isMatchFieldArrayName","searchName","isNameInFieldArray","names","some","isWeb","window","document","cloneObject","copy","File","getTime","Set","Map","modeChecker","isOnSubmit","isRadioOrCheckboxFunction","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","isValidateAllFieldCriteria","formState","setFormState","isDirty","isValidating","submitCount","touched","isSubmitting","isSubmitSuccessful","readFormStateRef","formStateRef","observerRef","updateFormState","state","updateIsValidating","shouldRenderBaseOnError","shouldRender","shouldReRender","validFields","fieldsWithValidation","previousError","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","fields","Promise","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","isFieldWatched","match","renderWatchedInputs","found","size","setFieldArrayDefaultValues","payload","shouldSkipValidation","parentNodeName","currentError","validateResolver","removeFieldEventListener","forceDelete","handleChange","fieldRef","findRemovedFieldAndRemoveListener","updateWatchedValue","watchField","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","fieldArrayValue","combinedDefaultValues","registerFieldRef","fieldRefAndValidationOptions","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldErrors","fieldError","focus","focusOnErrorField","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","commonProps","setValue","register","refOrRegisterOptions","unregister","prop","control","watch","reset","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","shouldFocus","__rest","getOwnPropertySymbols","propertyIsEnumerable","FormContext","displayName","useFormContext","FormProvider","children","props","Provider","generateId","performance","now","Math","random","toString","removeArrayAt","indexes","temp","splice","removeAtIndexes","sort","moveArrayAt","from","to","swapArrayAt","indexA","indexB","prepend","insert","fillEmptyArray","fill","fillBooleanArray","mapIds","keyName","skipWarn","useFieldArray","methods","focusIndexRef","fieldArrayParentName","memoizedDefaultValues","setFields","omitKey","_b","getFieldArrayValue","getCurrentFieldsValues","setFieldAndValidState","fieldsValues","resetFields","cleanup","updateDirtyFieldsWithDefaultValues","updatedFieldArrayValues","batchStateUpdate","method","args","updatedFieldValues","updatedFormValues","shouldSet","shouldUpdateValid","argA","argB","argC","argD","pop","resetFunctions","fieldArrayNames","delete","swap","move","emptyArray","append","appendValue","updateFormValues","remove","useController","rules","onFocus","isNotFieldArray","getInitialValue","setInputStateValue","valueRef","onFocusRef","commonTask","event","getInputValue","registerField","shouldUpdateValue","defineProperties","onBlur","onChange","meta","invalid","useWatch","updateValue","idRef","defaultValueRef","id","watchFieldsHookRender","watchFieldsHook","Controller","as","render","rest","componentProps"],"mappings":"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","file":"react-hook-form@6.14.0.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 99);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { isValidElement, useRef, useState, useCallback, useEffect, useMemo, createContext, useContext, createElement, cloneElement } from 'react';\n\nvar isHTMLElement = (value) => value instanceof HTMLElement;\n\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n    INPUT: 'input',\r\n};\r\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n    onTouched: 'onTouched',\r\n    all: 'all',\r\n};\r\nconst SELECT = 'select';\r\nconst UNDEFINED = 'undefined';\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\n\nfunction attachEventListeners({ ref }, shouldAttachChangeEvent, handleChange) {\r\n    if (isHTMLElement(ref) && handleChange) {\r\n        ref.addEventListener(shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\r\n        ref.addEventListener(EVENTS.BLUR, handleChange);\r\n    }\r\n}\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) &&\r\n    !Array.isArray(value) &&\r\n    isObjectType(value) &&\r\n    !(value instanceof Date);\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar compact = (value) => value.filter(Boolean);\n\nvar stringToPath = (input) => compact(input\r\n    .replace(/[\"|']/g, '')\r\n    .replace(/\\[/g, '.')\r\n    .replace(/\\]/g, '')\r\n    .split('.'));\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || Array.isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nvar transformToNestObject = (data, value = {}) => {\r\n    for (const key in data) {\r\n        !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\r\n    }\r\n    return value;\r\n};\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj = {}, path, defaultValue) => {\r\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nvar focusOnErrorField = (fields, fieldErrors) => {\r\n    for (const key in fields) {\r\n        if (get(fieldErrors, key)) {\r\n            const field = fields[key];\r\n            if (field) {\r\n                if (field.ref.focus && isUndefined(field.ref.focus())) {\r\n                    break;\r\n                }\r\n                else if (field.options) {\r\n                    field.options[0].ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\r\n    if (isHTMLElement(ref) && ref.removeEventListener) {\r\n        ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\r\n    }\r\n};\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: '',\r\n};\r\nvar getRadioValue = (options) => Array.isArray(options)\r\n    ? options.reduce((previous, option) => option && option.ref.checked\r\n        ? {\r\n            isValid: true,\r\n            value: option.ref.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nvar getMultipleSelectValue = (options) => [...options]\r\n    .filter(({ selected }) => selected)\r\n    .map(({ value }) => value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isMultipleSelect = (element) => element.type === `${SELECT}-multiple`;\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (Array.isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.ref.checked)\r\n                .map(({ ref: { value } }) => value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        const { checked, value, attributes } = options[0].ref;\r\n        return checked\r\n            ? attributes && !isUndefined(attributes.value)\r\n                ? isUndefined(value) || value === ''\r\n                    ? validResult\r\n                    : { value: value, isValid: true }\r\n                : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nfunction getFieldValue(fieldsRef, name, shallowFieldsStateRef, excludeDisabled) {\r\n    const field = fieldsRef.current[name];\r\n    if (field) {\r\n        const { ref: { value, disabled }, ref, valueAsNumber, valueAsDate, setValueAs, } = field;\r\n        if (disabled && excludeDisabled) {\r\n            return;\r\n        }\r\n        if (isFileInput(ref)) {\r\n            return ref.files;\r\n        }\r\n        if (isRadioInput(ref)) {\r\n            return getRadioValue(field.options).value;\r\n        }\r\n        if (isMultipleSelect(ref)) {\r\n            return getMultipleSelectValue(ref.options);\r\n        }\r\n        if (isCheckBoxInput(ref)) {\r\n            return getCheckboxValue(field.options).value;\r\n        }\r\n        return valueAsNumber\r\n            ? +value\r\n            : valueAsDate\r\n                ? ref.valueAsDate\r\n                : setValueAs\r\n                    ? setValueAs(value)\r\n                    : value;\r\n    }\r\n    if (shallowFieldsStateRef) {\r\n        return get(shallowFieldsStateRef.current, name);\r\n    }\r\n}\n\nfunction isDetached(element) {\r\n    if (!element) {\r\n        return true;\r\n    }\r\n    if (!(element instanceof HTMLElement) ||\r\n        element.nodeType === Node.DOCUMENT_NODE) {\r\n        return false;\r\n    }\r\n    return isDetached(element.parentNode);\r\n}\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nfunction baseGet(object, updatePath) {\r\n    const length = updatePath.slice(0, -1).length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return object;\r\n}\r\nfunction unset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : stringToPath(path);\r\n    const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    let previousObjRef;\r\n    if (childObject) {\r\n        delete childObject[key];\r\n    }\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index &&\r\n                ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (Array.isArray(objectRef) &&\r\n                        !objectRef.filter((data) => (isObject(data) && !isEmptyObject(data)) || isBoolean(data)).length))) {\r\n                previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return object;\r\n}\n\nconst isSameRef = (fieldValue, ref) => fieldValue && fieldValue.ref === ref;\r\nfunction findRemovedFieldAndRemoveListener(fieldsRef, handleChange, field, shallowFieldsStateRef, shouldUnregister, forceDelete) {\r\n    const { ref, ref: { name }, } = field;\r\n    const fieldRef = fieldsRef.current[name];\r\n    if (!shouldUnregister) {\r\n        const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\r\n        !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\r\n    }\r\n    if (!ref.type || !fieldRef) {\r\n        delete fieldsRef.current[name];\r\n        return;\r\n    }\r\n    if (isRadioInput(ref) || isCheckBoxInput(ref)) {\r\n        if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\r\n            compact(fieldRef.options).forEach((option = {}, index) => {\r\n                if ((isDetached(option.ref) && isSameRef(option, option.ref)) ||\r\n                    forceDelete) {\r\n                    removeAllEventListeners(option.ref, handleChange);\r\n                    unset(fieldRef.options, `[${index}]`);\r\n                }\r\n            });\r\n            if (fieldRef.options && !compact(fieldRef.options).length) {\r\n                delete fieldsRef.current[name];\r\n            }\r\n        }\r\n        else {\r\n            delete fieldsRef.current[name];\r\n        }\r\n    }\r\n    else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\r\n        removeAllEventListeners(ref, handleChange);\r\n        delete fieldsRef.current[name];\r\n    }\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepMerge(target, source) {\r\n    if (isPrimitive(target) || isPrimitive(source)) {\r\n        return source;\r\n    }\r\n    for (const key in source) {\r\n        const targetValue = target[key];\r\n        const sourceValue = source[key];\r\n        try {\r\n            target[key] =\r\n                (isObject(targetValue) && isObject(sourceValue)) ||\r\n                    (Array.isArray(targetValue) && Array.isArray(sourceValue))\r\n                    ? deepMerge(targetValue, sourceValue)\r\n                    : sourceValue;\r\n        }\r\n        catch (_a) { }\r\n    }\r\n    return target;\r\n}\n\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\r\n    let index = -1;\r\n    while (++index < values.length) {\r\n        for (const key in values[index]) {\r\n            if (Array.isArray(values[index][key])) {\r\n                !dirtyFields[index] && (dirtyFields[index] = {});\r\n                dirtyFields[index][key] = [];\r\n                setDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\r\n            }\r\n            else {\r\n                get(defaultValues[index] || {}, key) === values[index][key]\r\n                    ? set(dirtyFields[index] || {}, key)\r\n                    : (dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), { [key]: true }));\r\n            }\r\n        }\r\n        parentNode &&\r\n            !dirtyFields.length &&\r\n            delete parentNode[parentName];\r\n    }\r\n    return dirtyFields;\r\n}\r\nvar setFieldArrayDirtyFields = (values, defaultValues, dirtyFields) => deepMerge(setDirtyFields(values, defaultValues, dirtyFields), setDirtyFields(defaultValues, values, dirtyFields));\n\nvar isString = (value) => typeof value === 'string';\n\nvar getFieldsValues = (fieldsRef, shallowFieldsState, shouldUnregister, excludeDisabled, search) => {\r\n    const output = {};\r\n    for (const name in fieldsRef.current) {\r\n        if (isUndefined(search) ||\r\n            (isString(search)\r\n                ? name.startsWith(search)\r\n                : Array.isArray(search) && search.find((data) => name.startsWith(data)))) {\r\n            output[name] = getFieldValue(fieldsRef, name, undefined, excludeDisabled);\r\n        }\r\n    }\r\n    return shouldUnregister\r\n        ? transformToNestObject(output)\r\n        : deepMerge(shallowFieldsState, transformToNestObject(output));\r\n};\n\nfunction deepEqual(object1, object2, isErrorObject) {\r\n    if (isPrimitive(object1) ||\r\n        isPrimitive(object2) ||\r\n        object1 instanceof Date ||\r\n        object2 instanceof Date) {\r\n        return object1 === object2;\r\n    }\r\n    if (!isValidElement(object1)) {\r\n        const keys1 = Object.keys(object1);\r\n        const keys2 = Object.keys(object2);\r\n        if (keys1.length !== keys2.length) {\r\n            return false;\r\n        }\r\n        for (const key of keys1) {\r\n            const val1 = object1[key];\r\n            if (!(isErrorObject && key === 'ref')) {\r\n                const val2 = object2[key];\r\n                if ((isObject(val1) || Array.isArray(val1)) &&\r\n                    (isObject(val2) || Array.isArray(val2))\r\n                    ? !deepEqual(val1, val2, isErrorObject)\r\n                    : val1 !== val2) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n\nvar isErrorStateChanged = ({ errors, name, error, validFields, fieldsWithValidation, }) => {\r\n    const isValid = isUndefined(error);\r\n    const previousError = get(errors, name);\r\n    return ((isValid && !!previousError) ||\r\n        (!isValid && !deepEqual(previousError, error, true)) ||\r\n        (isValid && get(fieldsWithValidation, name) && !get(validFields, name)));\r\n};\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n    };\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isMessage = (value) => isString(value) || isValidElement(value);\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) || (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\r\n    ? Object.assign(Object.assign({}, errors[name]), { types: Object.assign(Object.assign({}, (errors[name] && errors[name].types ? errors[name].types : {})), { [type]: message || true }) }) : {};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, { ref, ref: { value }, options, required, maxLength, minLength, min, max, pattern, validate, }, shallowFieldsStateRef) => {\r\n    const name = ref.name;\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = value === '';\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, (exceedMax\r\n            ? appendErrorsCurry(maxType, message)\r\n            : appendErrorsCurry(minType, message)));\r\n    };\r\n    if (required &&\r\n        ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\r\n            (isBoolean(value) && !value) ||\r\n            (isCheckBox && !getCheckboxValue(options).isValid) ||\r\n            (isRadio && !getRadioValue(options).isValid))) {\r\n        const { value, message } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (value) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message, ref: isRadioOrCheckbox\r\n                    ? ((fieldsRef.current[name].options || [])[0] || {}).ref\r\n                    : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const maxOutput = getValueAndMessage(max);\r\n        const minOutput = getValueAndMessage(min);\r\n        if (!isNaN(value)) {\r\n            const valueNumber = ref.valueAsNumber || parseFloat(value);\r\n            if (!isNullOrUndefined(maxOutput.value)) {\r\n                exceedMax = valueNumber > maxOutput.value;\r\n            }\r\n            if (!isNullOrUndefined(minOutput.value)) {\r\n                exceedMin = valueNumber < minOutput.value;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(value);\r\n            if (isString(maxOutput.value)) {\r\n                exceedMax = valueDate > new Date(maxOutput.value);\r\n            }\r\n            if (isString(minOutput.value)) {\r\n                exceedMin = valueDate < new Date(minOutput.value);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && !isEmpty && (maxLength || minLength)) {\r\n        const maxLengthOutput = getValueAndMessage(maxLength);\r\n        const minLengthOutput = getValueAndMessage(minLength);\r\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\r\n            value.length > maxLengthOutput.value;\r\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\r\n            value.length < minLengthOutput.value;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && pattern && !isEmpty) {\r\n        const { value: patternValue, message } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !patternValue.test(value)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message,\r\n                ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\r\n        const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\r\n        if (isFunction(validate)) {\r\n            const result = await validate(fieldValue);\r\n            const validateError = getValidateError(result, validateRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const [key, validateFunction] of Object.entries(validate)) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateResult = await validateFunction(fieldValue);\r\n                const validateError = getValidateError(validateResult, validateRef, key);\r\n                if (validateError) {\r\n                    validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: validateRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return error;\r\n};\n\nconst getPath = (rootPath, values, paths = []) => {\r\n    for (const property in values) {\r\n        const rootName = (rootPath +\r\n            (isObject(values)\r\n                ? `.${property}`\r\n                : `[${property}]`));\r\n        isPrimitive(values[property])\r\n            ? paths.push(rootName)\r\n            : getPath(rootName, values[property], paths);\r\n    }\r\n    return paths;\r\n};\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, inputValue, isSingleField) => {\r\n    let value = undefined;\r\n    watchFields.add(fieldName);\r\n    if (!isEmptyObject(fieldValues)) {\r\n        value = get(fieldValues, fieldName);\r\n        if (isObject(value) || Array.isArray(value)) {\r\n            getPath(fieldName, value).forEach((name) => watchFields.add(name));\r\n        }\r\n    }\r\n    return isUndefined(value)\r\n        ? isSingleField\r\n            ? inputValue\r\n            : get(inputValue, fieldName)\r\n        : value;\r\n};\n\nvar skipValidation = ({ isOnBlur, isOnChange, isOnTouch, isTouched, isReValidateOnBlur, isReValidateOnChange, isBlurEvent, isSubmitted, isOnAll, }) => {\r\n    if (isOnAll) {\r\n        return false;\r\n    }\r\n    else if (!isSubmitted && isOnTouch) {\r\n        return !(isTouched || isBlurEvent);\r\n    }\r\n    else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\r\n        return !isBlurEvent;\r\n    }\r\n    else if (isSubmitted ? isReValidateOnChange : isOnChange) {\r\n        return isBlurEvent;\r\n    }\r\n    return true;\r\n};\n\nvar getFieldArrayParentName = (name) => name.substring(0, name.indexOf('['));\n\nconst isMatchFieldArrayName = (name, searchName) => RegExp(`^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(name);\r\nvar isNameInFieldArray = (names, name) => [...names].some((current) => isMatchFieldArrayName(name, current));\n\nvar isSelectInput = (element) => element.type === `${SELECT}-one`;\n\nfunction onDomRemove(fieldsRef, removeFieldEventListenerAndRef) {\r\n    const observer = new MutationObserver(() => {\r\n        for (const field of Object.values(fieldsRef.current)) {\r\n            if (field && field.options) {\r\n                for (const option of field.options) {\r\n                    if (option && option.ref && isDetached(option.ref)) {\r\n                        removeFieldEventListenerAndRef(field);\r\n                    }\r\n                }\r\n            }\r\n            else if (field && isDetached(field.ref)) {\r\n                removeFieldEventListenerAndRef(field);\r\n            }\r\n        }\r\n    });\r\n    observer.observe(window.document, {\r\n        childList: true,\r\n        subtree: true,\r\n    });\r\n    return observer;\r\n}\n\nvar isWeb = typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n\nfunction cloneObject(data) {\r\n    let copy;\r\n    if (isPrimitive(data) ||\r\n        (isWeb && (data instanceof File || isHTMLElement(data)))) {\r\n        return data;\r\n    }\r\n    if (data instanceof Date) {\r\n        copy = new Date(data.getTime());\r\n        return copy;\r\n    }\r\n    if (data instanceof Set) {\r\n        copy = new Set();\r\n        for (const item of data) {\r\n            copy.add(item);\r\n        }\r\n        return copy;\r\n    }\r\n    if (data instanceof Map) {\r\n        copy = new Map();\r\n        for (const key of data.keys()) {\r\n            copy.set(key, cloneObject(data.get(key)));\r\n        }\r\n        return copy;\r\n    }\r\n    copy = Array.isArray(data) ? [] : {};\r\n    for (const key in data) {\r\n        copy[key] = cloneObject(data[key]);\r\n    }\r\n    return copy;\r\n}\n\nvar modeChecker = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n    isOnAll: mode === VALIDATION_MODE.all,\r\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\n\nvar isRadioOrCheckboxFunction = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nconst isWindowUndefined = typeof window === UNDEFINED;\r\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\r\nfunction useForm({ mode = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, resolver, context, defaultValues = {}, shouldFocusError = true, shouldUnregister = true, criteriaMode, } = {}) {\r\n    const fieldsRef = useRef({});\r\n    const fieldArrayDefaultValuesRef = useRef({});\r\n    const fieldArrayValuesRef = useRef({});\r\n    const watchFieldsRef = useRef(new Set());\r\n    const useWatchFieldsRef = useRef({});\r\n    const useWatchRenderFunctionsRef = useRef({});\r\n    const fieldsWithValidationRef = useRef({});\r\n    const validFieldsRef = useRef({});\r\n    const defaultValuesRef = useRef(defaultValues);\r\n    const isUnMount = useRef(false);\r\n    const isWatchAllRef = useRef(false);\r\n    const handleChangeRef = useRef();\r\n    const shallowFieldsStateRef = useRef({});\r\n    const resetFieldArrayFunctionRef = useRef({});\r\n    const contextRef = useRef(context);\r\n    const resolverRef = useRef(resolver);\r\n    const fieldArrayNamesRef = useRef(new Set());\r\n    const modeRef = useRef(modeChecker(mode));\r\n    const { isOnSubmit, isOnTouch } = modeRef.current;\r\n    const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\r\n    const [formState, setFormState] = useState({\r\n        isDirty: false,\r\n        isValidating: false,\r\n        dirtyFields: {},\r\n        isSubmitted: false,\r\n        submitCount: 0,\r\n        touched: {},\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: !isOnSubmit,\r\n        errors: {},\r\n    });\r\n    const readFormStateRef = useRef({\r\n        isDirty: !isProxyEnabled,\r\n        dirtyFields: !isProxyEnabled,\r\n        touched: !isProxyEnabled || isOnTouch,\r\n        isValidating: !isProxyEnabled,\r\n        isSubmitting: !isProxyEnabled,\r\n        isValid: !isProxyEnabled,\r\n    });\r\n    const formStateRef = useRef(formState);\r\n    const observerRef = useRef();\r\n    const { isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange, } = useRef(modeChecker(reValidateMode)).current;\r\n    contextRef.current = context;\r\n    resolverRef.current = resolver;\r\n    formStateRef.current = formState;\r\n    shallowFieldsStateRef.current = shouldUnregister\r\n        ? {}\r\n        : isEmptyObject(shallowFieldsStateRef.current)\r\n            ? cloneObject(defaultValues)\r\n            : shallowFieldsStateRef.current;\r\n    const updateFormState = useCallback((state = {}) => {\r\n        if (!isUnMount.current) {\r\n            formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), state);\r\n            setFormState(formStateRef.current);\r\n        }\r\n    }, []);\r\n    const updateIsValidating = () => readFormStateRef.current.isValidating &&\r\n        updateFormState({\r\n            isValidating: true,\r\n        });\r\n    const shouldRenderBaseOnError = useCallback((name, error, shouldRender = false, state = {}, isValid) => {\r\n        let shouldReRender = shouldRender ||\r\n            isErrorStateChanged({\r\n                errors: formStateRef.current.errors,\r\n                error,\r\n                name,\r\n                validFields: validFieldsRef.current,\r\n                fieldsWithValidation: fieldsWithValidationRef.current,\r\n            });\r\n        const previousError = get(formStateRef.current.errors, name);\r\n        if (error) {\r\n            unset(validFieldsRef.current, name);\r\n            shouldReRender =\r\n                shouldReRender ||\r\n                    !previousError ||\r\n                    !deepEqual(previousError, error, true);\r\n            set(formStateRef.current.errors, name, error);\r\n        }\r\n        else {\r\n            if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\r\n                set(validFieldsRef.current, name, true);\r\n                shouldReRender = shouldReRender || previousError;\r\n            }\r\n            unset(formStateRef.current.errors, name);\r\n        }\r\n        if ((shouldReRender && !isNullOrUndefined(shouldRender)) ||\r\n            !isEmptyObject(state) ||\r\n            readFormStateRef.current.isValidating) {\r\n            updateFormState(Object.assign(Object.assign(Object.assign({}, state), (resolverRef.current ? { isValid: !!isValid } : {})), { isValidating: false }));\r\n        }\r\n    }, []);\r\n    const setFieldValue = useCallback((name, rawValue) => {\r\n        const { ref, options } = fieldsRef.current[name];\r\n        const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\r\n            ? ''\r\n            : rawValue;\r\n        if (isRadioInput(ref)) {\r\n            (options || []).forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));\r\n        }\r\n        else if (isFileInput(ref) && !isString(value)) {\r\n            ref.files = value;\r\n        }\r\n        else if (isMultipleSelect(ref)) {\r\n            [...ref.options].forEach((selectRef) => (selectRef.selected = value.includes(selectRef.value)));\r\n        }\r\n        else if (isCheckBoxInput(ref) && options) {\r\n            options.length > 1\r\n                ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = Array.isArray(value)\r\n                    ? !!value.find((data) => data === checkboxRef.value)\r\n                    : value === checkboxRef.value))\r\n                : (options[0].ref.checked = !!value);\r\n        }\r\n        else {\r\n            ref.value = value;\r\n        }\r\n    }, []);\r\n    const isFormDirty = useCallback((name, data) => {\r\n        if (readFormStateRef.current.isDirty) {\r\n            const formValues = getValues();\r\n            name && data && set(formValues, name, data);\r\n            return !deepEqual(formValues, defaultValuesRef.current);\r\n        }\r\n        return false;\r\n    }, []);\r\n    const updateAndGetDirtyState = useCallback((name, shouldRender = true) => {\r\n        if (readFormStateRef.current.isDirty ||\r\n            readFormStateRef.current.dirtyFields) {\r\n            const isFieldDirty = !deepEqual(get(defaultValuesRef.current, name), getFieldValue(fieldsRef, name, shallowFieldsStateRef));\r\n            const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\r\n            const previousIsDirty = formStateRef.current.isDirty;\r\n            isFieldDirty\r\n                ? set(formStateRef.current.dirtyFields, name, true)\r\n                : unset(formStateRef.current.dirtyFields, name);\r\n            const state = {\r\n                isDirty: isFormDirty(),\r\n                dirtyFields: formStateRef.current.dirtyFields,\r\n            };\r\n            const isChanged = (readFormStateRef.current.isDirty &&\r\n                previousIsDirty !== state.isDirty) ||\r\n                (readFormStateRef.current.dirtyFields &&\r\n                    isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\r\n            isChanged && shouldRender && updateFormState(state);\r\n            return isChanged ? state : {};\r\n        }\r\n        return {};\r\n    }, []);\r\n    const executeValidation = useCallback(async (name, skipReRender) => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!fieldsRef.current[name]) {\r\n                console.warn('📋 Field is missing with `name` attribute: ', name);\r\n                return false;\r\n            }\r\n        }\r\n        const error = (await validateField(fieldsRef, isValidateAllFieldCriteria, fieldsRef.current[name], shallowFieldsStateRef))[name];\r\n        shouldRenderBaseOnError(name, error, skipReRender);\r\n        return isUndefined(error);\r\n    }, [shouldRenderBaseOnError, isValidateAllFieldCriteria]);\r\n    const executeSchemaOrResolverValidation = useCallback(async (names) => {\r\n        const { errors } = await resolverRef.current(getValues(), contextRef.current, isValidateAllFieldCriteria);\r\n        const previousFormIsValid = formStateRef.current.isValid;\r\n        if (Array.isArray(names)) {\r\n            const isInputsValid = names\r\n                .map((name) => {\r\n                const error = get(errors, name);\r\n                error\r\n                    ? set(formStateRef.current.errors, name, error)\r\n                    : unset(formStateRef.current.errors, name);\r\n                return !error;\r\n            })\r\n                .every(Boolean);\r\n            updateFormState({\r\n                isValid: isEmptyObject(errors),\r\n                isValidating: false,\r\n            });\r\n            return isInputsValid;\r\n        }\r\n        else {\r\n            const error = get(errors, names);\r\n            shouldRenderBaseOnError(names, error, previousFormIsValid !== isEmptyObject(errors), {}, isEmptyObject(errors));\r\n            return !error;\r\n        }\r\n    }, [shouldRenderBaseOnError, isValidateAllFieldCriteria]);\r\n    const trigger = useCallback(async (name) => {\r\n        const fields = name || Object.keys(fieldsRef.current);\r\n        updateIsValidating();\r\n        if (resolverRef.current) {\r\n            return executeSchemaOrResolverValidation(fields);\r\n        }\r\n        if (Array.isArray(fields)) {\r\n            !name && (formStateRef.current.errors = {});\r\n            const result = await Promise.all(fields.map(async (data) => await executeValidation(data, null)));\r\n            updateFormState({\r\n                isValidating: false,\r\n            });\r\n            return result.every(Boolean);\r\n        }\r\n        return await executeValidation(fields);\r\n    }, [executeSchemaOrResolverValidation, executeValidation]);\r\n    const setInternalValues = useCallback((name, value, { shouldDirty, shouldValidate }) => {\r\n        const data = {};\r\n        set(data, name, value);\r\n        for (const fieldName of getPath(name, value)) {\r\n            if (fieldsRef.current[fieldName]) {\r\n                setFieldValue(fieldName, get(data, fieldName));\r\n                shouldDirty && updateAndGetDirtyState(fieldName);\r\n                shouldValidate && trigger(fieldName);\r\n            }\r\n        }\r\n    }, [trigger, setFieldValue, updateAndGetDirtyState]);\r\n    const setInternalValue = useCallback((name, value, config) => {\r\n        !shouldUnregister &&\r\n            !isPrimitive(value) &&\r\n            set(shallowFieldsStateRef.current, name, Object.assign({}, value));\r\n        if (fieldsRef.current[name]) {\r\n            setFieldValue(name, value);\r\n            config.shouldDirty && updateAndGetDirtyState(name);\r\n            config.shouldValidate && trigger(name);\r\n        }\r\n        else if (!isPrimitive(value)) {\r\n            setInternalValues(name, value, config);\r\n            if (fieldArrayNamesRef.current.has(name)) {\r\n                const parentName = getFieldArrayParentName(name) || name;\r\n                set(fieldArrayDefaultValuesRef.current, name, value);\r\n                resetFieldArrayFunctionRef.current[parentName]({\r\n                    [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\r\n                });\r\n                if ((readFormStateRef.current.isDirty ||\r\n                    readFormStateRef.current.dirtyFields) &&\r\n                    config.shouldDirty) {\r\n                    set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(value, get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\r\n                    updateFormState({\r\n                        isDirty: !deepEqual(Object.assign(Object.assign({}, getValues()), { [name]: value }), defaultValuesRef.current),\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\r\n    }, [updateAndGetDirtyState, setFieldValue, setInternalValues]);\r\n    const isFieldWatched = (name) => isWatchAllRef.current ||\r\n        watchFieldsRef.current.has(name) ||\r\n        watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\r\n    const renderWatchedInputs = (name) => {\r\n        let found = true;\r\n        if (!isEmptyObject(useWatchFieldsRef.current)) {\r\n            for (const key in useWatchFieldsRef.current) {\r\n                if (!name ||\r\n                    !useWatchFieldsRef.current[key].size ||\r\n                    useWatchFieldsRef.current[key].has(name) ||\r\n                    useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))) {\r\n                    useWatchRenderFunctionsRef.current[key]();\r\n                    found = false;\r\n                }\r\n            }\r\n        }\r\n        return found;\r\n    };\r\n    function setValue(name, value, config) {\r\n        setInternalValue(name, value, config || {});\r\n        isFieldWatched(name) && updateFormState();\r\n        renderWatchedInputs(name);\r\n    }\r\n    handleChangeRef.current = handleChangeRef.current\r\n        ? handleChangeRef.current\r\n        : async ({ type, target }) => {\r\n            let name = target.name;\r\n            const field = fieldsRef.current[name];\r\n            let error;\r\n            let isValid;\r\n            if (field) {\r\n                const isBlurEvent = type === EVENTS.BLUR;\r\n                const shouldSkipValidation = skipValidation(Object.assign({ isBlurEvent,\r\n                    isReValidateOnChange,\r\n                    isReValidateOnBlur, isTouched: !!get(formStateRef.current.touched, name), isSubmitted: formStateRef.current.isSubmitted }, modeRef.current));\r\n                let state = updateAndGetDirtyState(name, false);\r\n                let shouldRender = !isEmptyObject(state) ||\r\n                    (!isBlurEvent && isFieldWatched(name));\r\n                if (isBlurEvent &&\r\n                    !get(formStateRef.current.touched, name) &&\r\n                    readFormStateRef.current.touched) {\r\n                    set(formStateRef.current.touched, name, true);\r\n                    state = Object.assign(Object.assign({}, state), { touched: formStateRef.current.touched });\r\n                }\r\n                if (!shouldUnregister && isCheckBoxInput(target)) {\r\n                    set(shallowFieldsStateRef.current, name, getFieldValue(fieldsRef, name));\r\n                }\r\n                if (shouldSkipValidation) {\r\n                    !isBlurEvent && renderWatchedInputs(name);\r\n                    return ((!isEmptyObject(state) ||\r\n                        (shouldRender && isEmptyObject(state))) &&\r\n                        updateFormState(state));\r\n                }\r\n                updateIsValidating();\r\n                if (resolverRef.current) {\r\n                    const { errors } = await resolverRef.current(getValues(), contextRef.current, isValidateAllFieldCriteria);\r\n                    const previousFormIsValid = formStateRef.current.isValid;\r\n                    error = get(errors, name);\r\n                    if (isCheckBoxInput(target) &&\r\n                        !error &&\r\n                        resolverRef.current) {\r\n                        const parentNodeName = getFieldArrayParentName(name);\r\n                        const currentError = get(errors, parentNodeName, {});\r\n                        currentError.type &&\r\n                            currentError.message &&\r\n                            (error = currentError);\r\n                        if (parentNodeName &&\r\n                            (currentError ||\r\n                                get(formStateRef.current.errors, parentNodeName))) {\r\n                            name = parentNodeName;\r\n                        }\r\n                    }\r\n                    isValid = isEmptyObject(errors);\r\n                    previousFormIsValid !== isValid && (shouldRender = true);\r\n                }\r\n                else {\r\n                    error = (await validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef))[name];\r\n                }\r\n                !isBlurEvent && renderWatchedInputs(name);\r\n                shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\r\n            }\r\n        };\r\n    function setFieldArrayDefaultValues(data) {\r\n        if (!shouldUnregister) {\r\n            let copy = cloneObject(data);\r\n            for (const value of fieldArrayNamesRef.current) {\r\n                if (isKey(value) && !copy[value]) {\r\n                    copy = Object.assign(Object.assign({}, copy), { [value]: [] });\r\n                }\r\n            }\r\n            return copy;\r\n        }\r\n        return data;\r\n    }\r\n    function getValues(payload) {\r\n        if (isString(payload)) {\r\n            return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\r\n        }\r\n        if (Array.isArray(payload)) {\r\n            const data = {};\r\n            for (const name of payload) {\r\n                set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\r\n            }\r\n            return data;\r\n        }\r\n        return setFieldArrayDefaultValues(getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister));\r\n    }\r\n    const validateResolver = useCallback(async (values = {}) => {\r\n        const { errors } = await resolverRef.current(Object.assign(Object.assign({}, getValues()), values), contextRef.current, isValidateAllFieldCriteria);\r\n        const isValid = isEmptyObject(errors);\r\n        formStateRef.current.isValid !== isValid &&\r\n            updateFormState({\r\n                isValid,\r\n            });\r\n    }, [isValidateAllFieldCriteria]);\r\n    const removeFieldEventListener = useCallback((field, forceDelete) => findRemovedFieldAndRemoveListener(fieldsRef, handleChangeRef.current, field, shallowFieldsStateRef, shouldUnregister, forceDelete), [shouldUnregister]);\r\n    const updateWatchedValue = useCallback((name) => {\r\n        if (isWatchAllRef.current) {\r\n            updateFormState();\r\n        }\r\n        else {\r\n            for (const watchField of watchFieldsRef.current) {\r\n                if (watchField.startsWith(name)) {\r\n                    updateFormState();\r\n                    break;\r\n                }\r\n            }\r\n            renderWatchedInputs(name);\r\n        }\r\n    }, []);\r\n    const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\r\n        if (field) {\r\n            removeFieldEventListener(field, forceDelete);\r\n            if (shouldUnregister && !compact(field.options || []).length) {\r\n                unset(validFieldsRef.current, field.ref.name);\r\n                unset(fieldsWithValidationRef.current, field.ref.name);\r\n                unset(formStateRef.current.errors, field.ref.name);\r\n                set(formStateRef.current.dirtyFields, field.ref.name, true);\r\n                updateFormState({\r\n                    isDirty: isFormDirty(),\r\n                });\r\n                readFormStateRef.current.isValid &&\r\n                    resolverRef.current &&\r\n                    validateResolver();\r\n                updateWatchedValue(field.ref.name);\r\n            }\r\n        }\r\n    }, [validateResolver, removeFieldEventListener]);\r\n    function clearErrors(name) {\r\n        name &&\r\n            (Array.isArray(name) ? name : [name]).forEach((inputName) => fieldsRef.current[inputName] && isKey(inputName)\r\n                ? delete formStateRef.current.errors[inputName]\r\n                : unset(formStateRef.current.errors, inputName));\r\n        updateFormState({\r\n            errors: name ? formStateRef.current.errors : {},\r\n        });\r\n    }\r\n    function setError(name, error) {\r\n        const ref = (fieldsRef.current[name] || {}).ref;\r\n        set(formStateRef.current.errors, name, Object.assign(Object.assign({}, error), { ref }));\r\n        updateFormState({\r\n            isValid: false,\r\n        });\r\n        error.shouldFocus && ref && ref.focus && ref.focus();\r\n    }\r\n    const watchInternal = useCallback((fieldNames, defaultValue, watchId) => {\r\n        const watchFields = watchId\r\n            ? useWatchFieldsRef.current[watchId]\r\n            : watchFieldsRef.current;\r\n        let fieldValues = getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister, false, fieldNames);\r\n        if (isString(fieldNames)) {\r\n            if (fieldArrayNamesRef.current.has(fieldNames)) {\r\n                const fieldArrayValue = get(fieldArrayValuesRef.current, fieldNames, []);\r\n                fieldValues =\r\n                    !fieldArrayValue.length ||\r\n                        fieldArrayValue.length !==\r\n                            compact(get(fieldValues, fieldNames, [])).length\r\n                        ? fieldArrayValuesRef.current\r\n                        : fieldValues;\r\n            }\r\n            return assignWatchFields(fieldValues, fieldNames, watchFields, isUndefined(get(defaultValuesRef.current, fieldNames))\r\n                ? defaultValue\r\n                : get(defaultValuesRef.current, fieldNames), true);\r\n        }\r\n        const combinedDefaultValues = isUndefined(defaultValue)\r\n            ? defaultValuesRef.current\r\n            : defaultValue;\r\n        if (Array.isArray(fieldNames)) {\r\n            return fieldNames.reduce((previous, name) => (Object.assign(Object.assign({}, previous), { [name]: assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues) })), {});\r\n        }\r\n        isWatchAllRef.current = isUndefined(watchId);\r\n        return transformToNestObject((!isEmptyObject(fieldValues) && fieldValues) ||\r\n            combinedDefaultValues);\r\n    }, []);\r\n    function watch(fieldNames, defaultValue) {\r\n        return watchInternal(fieldNames, defaultValue);\r\n    }\r\n    function unregister(name) {\r\n        for (const fieldName of Array.isArray(name) ? name : [name]) {\r\n            removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\r\n        }\r\n    }\r\n    function registerFieldRef(ref, options = {}) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!ref.name) {\r\n                return console.warn('📋 Field is missing `name` attribute', ref, `https://react-hook-form.com/api#useForm`);\r\n            }\r\n            if (fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\r\n                !RegExp(`^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\r\n                    .replace(/\\[/g, '\\\\[')\r\n                    .replace(/\\]/g, '\\\\]')).test(ref.name)) {\r\n                return console.warn('📋 `name` prop should be in object shape: name=\"test[index].name\"', ref, 'https://react-hook-form.com/api#useFieldArray');\r\n            }\r\n        }\r\n        const { name, type, value } = ref;\r\n        const fieldRefAndValidationOptions = Object.assign({ ref }, options);\r\n        const fields = fieldsRef.current;\r\n        const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\r\n        const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n        const compareRef = (currentRef) => isWeb && (!isHTMLElement(ref) || currentRef === ref);\r\n        let field = fields[name];\r\n        let isEmptyDefaultValue = true;\r\n        let defaultValue;\r\n        if (field &&\r\n            (isRadioOrCheckbox\r\n                ? Array.isArray(field.options) &&\r\n                    compact(field.options).find((option) => {\r\n                        return value === option.ref.value && compareRef(option.ref);\r\n                    })\r\n                : compareRef(field.ref))) {\r\n            fields[name] = Object.assign(Object.assign({}, field), options);\r\n            return;\r\n        }\r\n        if (type) {\r\n            field = isRadioOrCheckbox\r\n                ? Object.assign({ options: [\r\n                        ...compact((field && field.options) || []),\r\n                        {\r\n                            ref,\r\n                        },\r\n                    ], ref: { type, name } }, options) : Object.assign({}, fieldRefAndValidationOptions);\r\n        }\r\n        else {\r\n            field = fieldRefAndValidationOptions;\r\n        }\r\n        fields[name] = field;\r\n        const isEmptyUnmountFields = isUndefined(get(shallowFieldsStateRef.current, name));\r\n        if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\r\n            defaultValue = get(isEmptyUnmountFields\r\n                ? defaultValuesRef.current\r\n                : shallowFieldsStateRef.current, name);\r\n            isEmptyDefaultValue = isUndefined(defaultValue);\r\n            if (!isEmptyDefaultValue && !isFieldArray) {\r\n                setFieldValue(name, defaultValue);\r\n            }\r\n        }\r\n        if (!isEmptyObject(options)) {\r\n            set(fieldsWithValidationRef.current, name, true);\r\n            if (!isOnSubmit && readFormStateRef.current.isValid) {\r\n                validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef).then((error) => {\r\n                    const previousFormIsValid = formStateRef.current.isValid;\r\n                    isEmptyObject(error)\r\n                        ? set(validFieldsRef.current, name, true)\r\n                        : unset(validFieldsRef.current, name);\r\n                    previousFormIsValid !== isEmptyObject(error) && updateFormState();\r\n                });\r\n            }\r\n        }\r\n        if (!(isFieldArray && isEmptyDefaultValue)) {\r\n            !isFieldArray && unset(formStateRef.current.dirtyFields, name);\r\n        }\r\n        if (type) {\r\n            attachEventListeners(isRadioOrCheckbox && field.options\r\n                ? field.options[field.options.length - 1]\r\n                : field, isRadioOrCheckbox || isSelectInput(ref), handleChangeRef.current);\r\n        }\r\n    }\r\n    function register(refOrRegisterOptions, options) {\r\n        if (!isWindowUndefined) {\r\n            if (isString(refOrRegisterOptions)) {\r\n                registerFieldRef({ name: refOrRegisterOptions }, options);\r\n            }\r\n            else if (isObject(refOrRegisterOptions) &&\r\n                'name' in refOrRegisterOptions) {\r\n                registerFieldRef(refOrRegisterOptions, options);\r\n            }\r\n            else {\r\n                return (ref) => ref && registerFieldRef(ref, refOrRegisterOptions);\r\n            }\r\n        }\r\n    }\r\n    const handleSubmit = useCallback((onValid, onInvalid) => async (e) => {\r\n        if (e && e.preventDefault) {\r\n            e.preventDefault();\r\n            e.persist();\r\n        }\r\n        let fieldErrors = {};\r\n        let fieldValues = setFieldArrayDefaultValues(getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister, true));\r\n        readFormStateRef.current.isSubmitting &&\r\n            updateFormState({\r\n                isSubmitting: true,\r\n            });\r\n        try {\r\n            if (resolverRef.current) {\r\n                const { errors, values } = await resolverRef.current(fieldValues, contextRef.current, isValidateAllFieldCriteria);\r\n                formStateRef.current.errors = fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                for (const field of Object.values(fieldsRef.current)) {\r\n                    if (field) {\r\n                        const { name } = field.ref;\r\n                        const fieldError = await validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef);\r\n                        if (fieldError[name]) {\r\n                            set(fieldErrors, name, fieldError[name]);\r\n                            unset(validFieldsRef.current, name);\r\n                        }\r\n                        else if (get(fieldsWithValidationRef.current, name)) {\r\n                            unset(formStateRef.current.errors, name);\r\n                            set(validFieldsRef.current, name, true);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (isEmptyObject(fieldErrors) &&\r\n                Object.keys(formStateRef.current.errors).every((name) => name in fieldsRef.current)) {\r\n                updateFormState({\r\n                    errors: {},\r\n                    isSubmitting: true,\r\n                });\r\n                await onValid(fieldValues, e);\r\n            }\r\n            else {\r\n                formStateRef.current.errors = Object.assign(Object.assign({}, formStateRef.current.errors), fieldErrors);\r\n                onInvalid && (await onInvalid(formStateRef.current.errors, e));\r\n                shouldFocusError &&\r\n                    focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\r\n            }\r\n        }\r\n        finally {\r\n            formStateRef.current.isSubmitting = false;\r\n            updateFormState({\r\n                isSubmitted: true,\r\n                isSubmitting: false,\r\n                isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\r\n                submitCount: formStateRef.current.submitCount + 1,\r\n            });\r\n        }\r\n    }, [shouldFocusError, isValidateAllFieldCriteria]);\r\n    const resetRefs = ({ errors, isDirty, isSubmitted, touched, isValid, submitCount, dirtyFields, }) => {\r\n        if (!isValid) {\r\n            validFieldsRef.current = {};\r\n            fieldsWithValidationRef.current = {};\r\n        }\r\n        fieldArrayDefaultValuesRef.current = {};\r\n        watchFieldsRef.current = new Set();\r\n        isWatchAllRef.current = false;\r\n        updateFormState({\r\n            submitCount: submitCount ? formStateRef.current.submitCount : 0,\r\n            isDirty: isDirty ? formStateRef.current.isDirty : false,\r\n            isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\r\n            isValid: isValid ? formStateRef.current.isValid : false,\r\n            dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\r\n            touched: touched ? formStateRef.current.touched : {},\r\n            errors: errors ? formStateRef.current.errors : {},\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: false,\r\n        });\r\n    };\r\n    const reset = (values, omitResetState = {}) => {\r\n        if (isWeb) {\r\n            for (const field of Object.values(fieldsRef.current)) {\r\n                if (field) {\r\n                    const { ref, options } = field;\r\n                    const inputRef = isRadioOrCheckboxFunction(ref) && Array.isArray(options)\r\n                        ? options[0].ref\r\n                        : ref;\r\n                    if (isHTMLElement(inputRef)) {\r\n                        try {\r\n                            inputRef.closest('form').reset();\r\n                            break;\r\n                        }\r\n                        catch (_a) { }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        fieldsRef.current = {};\r\n        defaultValuesRef.current = Object.assign({}, (values || defaultValuesRef.current));\r\n        values && renderWatchedInputs('');\r\n        Object.values(resetFieldArrayFunctionRef.current).forEach((resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray());\r\n        shallowFieldsStateRef.current = shouldUnregister\r\n            ? {}\r\n            : cloneObject(values || defaultValuesRef.current);\r\n        resetRefs(omitResetState);\r\n    };\r\n    useEffect(() => {\r\n        resolver && readFormStateRef.current.isValid && validateResolver();\r\n        observerRef.current =\r\n            observerRef.current || !isWeb\r\n                ? observerRef.current\r\n                : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\r\n    }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\r\n    useEffect(() => () => {\r\n        observerRef.current && observerRef.current.disconnect();\r\n        isUnMount.current = true;\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            return;\r\n        }\r\n        Object.values(fieldsRef.current).forEach((field) => removeFieldEventListenerAndRef(field, true));\r\n    }, []);\r\n    if (!resolver && readFormStateRef.current.isValid) {\r\n        formState.isValid =\r\n            deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\r\n                isEmptyObject(formStateRef.current.errors);\r\n    }\r\n    const commonProps = {\r\n        trigger,\r\n        setValue: useCallback(setValue, [setInternalValue, trigger]),\r\n        getValues: useCallback(getValues, []),\r\n        register: useCallback(register, [defaultValuesRef.current]),\r\n        unregister: useCallback(unregister, []),\r\n        formState: isProxyEnabled\r\n            ? new Proxy(formState, {\r\n                get: (obj, prop) => {\r\n                    if (process.env.NODE_ENV !== 'production') {\r\n                        if (prop === 'isValid' && isOnSubmit) {\r\n                            console.warn('📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState');\r\n                        }\r\n                    }\r\n                    if (prop in obj) {\r\n                        readFormStateRef.current[prop] = true;\r\n                        return obj[prop];\r\n                    }\r\n                    return undefined;\r\n                },\r\n            })\r\n            : formState,\r\n    };\r\n    const control = useMemo(() => (Object.assign({ isFormDirty,\r\n        updateWatchedValue,\r\n        shouldUnregister,\r\n        updateFormState,\r\n        removeFieldEventListener,\r\n        watchInternal, mode: modeRef.current, reValidateMode: {\r\n            isReValidateOnBlur,\r\n            isReValidateOnChange,\r\n        }, validateResolver: resolver ? validateResolver : undefined, fieldsRef,\r\n        resetFieldArrayFunctionRef,\r\n        useWatchFieldsRef,\r\n        useWatchRenderFunctionsRef,\r\n        fieldArrayDefaultValuesRef,\r\n        validFieldsRef,\r\n        fieldsWithValidationRef,\r\n        fieldArrayNamesRef,\r\n        readFormStateRef,\r\n        formStateRef,\r\n        defaultValuesRef,\r\n        shallowFieldsStateRef,\r\n        fieldArrayValuesRef }, commonProps)), [\r\n        defaultValuesRef.current,\r\n        updateWatchedValue,\r\n        shouldUnregister,\r\n        removeFieldEventListener,\r\n        watchInternal,\r\n    ]);\r\n    return Object.assign({ watch,\r\n        control,\r\n        handleSubmit, reset: useCallback(reset, []), clearErrors: useCallback(clearErrors, []), setError: useCallback(setError, []), errors: formState.errors }, commonProps);\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nconst FormContext = createContext(null);\r\nFormContext.displayName = 'RHFContext';\r\nconst useFormContext = () => useContext(FormContext);\r\nconst FormProvider = (_a) => {\r\n    var { children } = _a, props = __rest(_a, [\"children\"]);\r\n    return (createElement(FormContext.Provider, { value: Object.assign({}, props) }, children));\r\n};\n\nvar generateId = () => {\r\n    const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nfunction removeAtIndexes(data, indexes) {\r\n    let i = 0;\r\n    const temp = [...data];\r\n    for (const index of indexes) {\r\n        temp.splice(index - i, 1);\r\n        i++;\r\n    }\r\n    return compact(temp).length ? temp : [];\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : removeAtIndexes(data, (Array.isArray(index) ? index : [index]).sort());\n\nvar moveArrayAt = (data, from, to) => {\r\n    if (Array.isArray(data)) {\r\n        if (isUndefined(data[to])) {\r\n            data[to] = undefined;\r\n        }\r\n        data.splice(to, 0, data.splice(from, 1)[0]);\r\n        return data;\r\n    }\r\n    return [];\r\n};\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    const temp = [data[indexB], data[indexA]];\r\n    data[indexA] = temp[0];\r\n    data[indexB] = temp[1];\r\n};\n\nfunction prepend(data, value) {\r\n    return [...(Array.isArray(value) ? value : [value || undefined]), ...data];\r\n}\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...(Array.isArray(value) ? value : [value || undefined]),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n\nvar fillBooleanArray = (value) => (Array.isArray(value) ? value : [value]).map((data) => {\r\n    if (isObject(data)) {\r\n        const object = {};\r\n        for (const key in data) {\r\n            object[key] = true;\r\n        }\r\n        return object;\r\n    }\r\n    return true;\r\n});\n\nconst mapIds = (values = [], keyName, skipWarn) => {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (!skipWarn) {\r\n            for (const value of values) {\r\n                if (typeof value === 'object') {\r\n                    if (keyName in value) {\r\n                        console.warn(`📋 useFieldArray fieldValues contain the keyName \\`${keyName}\\` which is reserved for use by useFieldArray. https://react-hook-form.com/api#useFieldArray`);\r\n                        break;\r\n                    }\r\n                }\r\n                else {\r\n                    console.warn(`📋 useFieldArray input's name should be in object shape instead of flat array. https://react-hook-form.com/api#useFieldArray`);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return values.map((value) => (Object.assign({ [keyName]: value[keyName] || generateId() }, value)));\r\n};\r\nconst useFieldArray = ({ control, name, keyName = 'id', }) => {\r\n    const methods = useFormContext();\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (!control && !methods) {\r\n            throw new Error('📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray');\r\n        }\r\n    }\r\n    const focusIndexRef = useRef(-1);\r\n    const { isFormDirty, updateWatchedValue, resetFieldArrayFunctionRef, fieldArrayNamesRef, fieldsRef, defaultValuesRef, removeFieldEventListener, formStateRef, shallowFieldsStateRef, updateFormState, readFormStateRef, validFieldsRef, fieldsWithValidationRef, fieldArrayDefaultValuesRef, validateResolver, getValues, shouldUnregister, fieldArrayValuesRef, } = control || methods.control;\r\n    const fieldArrayParentName = getFieldArrayParentName(name);\r\n    const memoizedDefaultValues = useRef([\r\n        ...(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\r\n            ? get(fieldArrayDefaultValuesRef.current, name, [])\r\n            : get(shouldUnregister\r\n                ? defaultValuesRef.current\r\n                : shallowFieldsStateRef.current, name, [])),\r\n    ]);\r\n    const [fields, setFields] = useState(mapIds(memoizedDefaultValues.current, keyName));\r\n    set(fieldArrayValuesRef.current, name, fields);\r\n    const omitKey = (fields) => fields.map((_a = {}) => {\r\n        var _b = keyName, omitted = _a[_b], rest = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\r\n        return rest;\r\n    });\r\n    fieldArrayNamesRef.current.add(name);\r\n    const getFieldArrayValue = useCallback(() => get(fieldArrayValuesRef.current, name, []), [name]);\r\n    const getCurrentFieldsValues = () => mapIds(get(getValues(), name, getFieldArrayValue()).map((item, index) => (Object.assign(Object.assign({}, getFieldArrayValue()[index]), item))), keyName, true);\r\n    fieldArrayNamesRef.current.add(name);\r\n    if (fieldArrayParentName &&\r\n        !get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)) {\r\n        set(fieldArrayDefaultValuesRef.current, fieldArrayParentName, cloneObject(get(defaultValuesRef.current, fieldArrayParentName)));\r\n    }\r\n    const setFieldAndValidState = (fieldsValues) => {\r\n        setFields(fieldsValues);\r\n        set(fieldArrayValuesRef.current, name, fieldsValues);\r\n        if (readFormStateRef.current.isValid && validateResolver) {\r\n            const values = getValues();\r\n            set(values, name, fieldsValues);\r\n            validateResolver(values);\r\n        }\r\n    };\r\n    const resetFields = () => {\r\n        for (const key in fieldsRef.current) {\r\n            if (isMatchFieldArrayName(key, name)) {\r\n                removeFieldEventListener(fieldsRef.current[key], true);\r\n                delete fieldsRef.current[key];\r\n            }\r\n        }\r\n    };\r\n    const cleanup = (ref) => !compact(get(ref, name, [])).length && unset(ref, name);\r\n    const updateDirtyFieldsWithDefaultValues = (updatedFieldArrayValues) => {\r\n        if (updatedFieldArrayValues) {\r\n            set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFieldArrayValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\r\n        }\r\n    };\r\n    const batchStateUpdate = (method, args, updatedFieldValues, updatedFormValues = [], shouldSet = true, shouldUpdateValid = false) => {\r\n        if (get(shallowFieldsStateRef.current, name)) {\r\n            const output = method(get(shallowFieldsStateRef.current, name), args.argA, args.argB);\r\n            shouldSet && set(shallowFieldsStateRef.current, name, output);\r\n        }\r\n        if (get(fieldArrayDefaultValuesRef.current, name)) {\r\n            const output = method(get(fieldArrayDefaultValuesRef.current, name), args.argA, args.argB);\r\n            shouldSet && set(fieldArrayDefaultValuesRef.current, name, output);\r\n            cleanup(fieldArrayDefaultValuesRef.current);\r\n        }\r\n        if (Array.isArray(get(formStateRef.current.errors, name))) {\r\n            const output = method(get(formStateRef.current.errors, name), args.argA, args.argB);\r\n            shouldSet && set(formStateRef.current.errors, name, output);\r\n            cleanup(formStateRef.current.errors);\r\n        }\r\n        if (readFormStateRef.current.touched &&\r\n            get(formStateRef.current.touched, name)) {\r\n            const output = method(get(formStateRef.current.touched, name), args.argA, args.argB);\r\n            shouldSet && set(formStateRef.current.touched, name, output);\r\n            cleanup(formStateRef.current.touched);\r\n        }\r\n        if (readFormStateRef.current.dirtyFields ||\r\n            readFormStateRef.current.isDirty) {\r\n            const output = method(get(formStateRef.current.dirtyFields, name, []), args.argC, args.argD);\r\n            shouldSet && set(formStateRef.current.dirtyFields, name, output);\r\n            updateDirtyFieldsWithDefaultValues(updatedFieldValues);\r\n            cleanup(formStateRef.current.dirtyFields);\r\n        }\r\n        if (shouldUpdateValid &&\r\n            readFormStateRef.current.isValid &&\r\n            !validateResolver) {\r\n            set(validFieldsRef.current, name, method(get(validFieldsRef.current, name, []), args.argA));\r\n            cleanup(validFieldsRef.current);\r\n            set(fieldsWithValidationRef.current, name, method(get(fieldsWithValidationRef.current, name, []), args.argA));\r\n            cleanup(fieldsWithValidationRef.current);\r\n        }\r\n        updateFormState({\r\n            isDirty: isFormDirty(name, omitKey(updatedFormValues)),\r\n        });\r\n    };\r\n    const append = (value, shouldFocus = true) => {\r\n        const appendValue = Array.isArray(value) ? value : [value];\r\n        const updateFormValues = [\r\n            ...getCurrentFieldsValues(),\r\n            ...mapIds(appendValue, keyName),\r\n        ];\r\n        setFieldAndValidState(updateFormValues);\r\n        if (readFormStateRef.current.dirtyFields ||\r\n            readFormStateRef.current.isDirty) {\r\n            updateDirtyFieldsWithDefaultValues(updateFormValues);\r\n            updateFormState({\r\n                isDirty: true,\r\n                dirtyFields: formStateRef.current.dirtyFields,\r\n            });\r\n        }\r\n        !shouldUnregister &&\r\n            set(shallowFieldsStateRef.current, name, [\r\n                ...(get(shallowFieldsStateRef.current, name) || []),\r\n                ...cloneObject(appendValue),\r\n            ]);\r\n        focusIndexRef.current = shouldFocus\r\n            ? get(fieldArrayValuesRef.current, name).length - 1\r\n            : -1;\r\n    };\r\n    const prepend$1 = (value, shouldFocus = true) => {\r\n        const emptyArray = fillEmptyArray(value);\r\n        const updatedFieldArrayValues = prepend(getCurrentFieldsValues(), mapIds(Array.isArray(value) ? value : [value], keyName));\r\n        setFieldAndValidState(updatedFieldArrayValues);\r\n        resetFields();\r\n        batchStateUpdate(prepend, {\r\n            argA: emptyArray,\r\n            argC: fillBooleanArray(value),\r\n        }, updatedFieldArrayValues);\r\n        focusIndexRef.current = shouldFocus ? 0 : -1;\r\n    };\r\n    const remove = (index) => {\r\n        const fieldValues = getCurrentFieldsValues();\r\n        const updatedFieldValues = removeArrayAt(fieldValues, index);\r\n        setFieldAndValidState(updatedFieldValues);\r\n        resetFields();\r\n        batchStateUpdate(removeArrayAt, {\r\n            argA: index,\r\n            argC: index,\r\n        }, updatedFieldValues, removeArrayAt(fieldValues, index), true, true);\r\n    };\r\n    const insert$1 = (index, value, shouldFocus = true) => {\r\n        const emptyArray = fillEmptyArray(value);\r\n        const fieldValues = getCurrentFieldsValues();\r\n        const updatedFieldArrayValues = insert(fieldValues, index, mapIds(Array.isArray(value) ? value : [value], keyName));\r\n        setFieldAndValidState(updatedFieldArrayValues);\r\n        resetFields();\r\n        batchStateUpdate(insert, {\r\n            argA: index,\r\n            argB: emptyArray,\r\n            argC: index,\r\n            argD: fillBooleanArray(value),\r\n        }, updatedFieldArrayValues, insert(fieldValues, index));\r\n        focusIndexRef.current = shouldFocus ? index : -1;\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const fieldValues = getCurrentFieldsValues();\r\n        swapArrayAt(fieldValues, indexA, indexB);\r\n        resetFields();\r\n        setFieldAndValidState([...fieldValues]);\r\n        batchStateUpdate(swapArrayAt, {\r\n            argA: indexA,\r\n            argB: indexB,\r\n            argC: indexA,\r\n            argD: indexB,\r\n        }, undefined, fieldValues, false);\r\n    };\r\n    const move = (from, to) => {\r\n        const fieldValues = getCurrentFieldsValues();\r\n        moveArrayAt(fieldValues, from, to);\r\n        resetFields();\r\n        setFieldAndValidState([...fieldValues]);\r\n        batchStateUpdate(moveArrayAt, {\r\n            argA: from,\r\n            argB: to,\r\n            argC: from,\r\n            argD: to,\r\n        }, undefined, fieldValues, false);\r\n    };\r\n    useEffect(() => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!name) {\r\n                console.warn('📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray');\r\n            }\r\n        }\r\n        const defaultValues = get(fieldArrayDefaultValuesRef.current, name);\r\n        if (defaultValues && fields.length < defaultValues.length) {\r\n            defaultValues.pop();\r\n            set(fieldArrayDefaultValuesRef.current, name, defaultValues);\r\n        }\r\n        updateWatchedValue(name);\r\n        if (focusIndexRef.current > -1) {\r\n            for (const key in fieldsRef.current) {\r\n                const field = fieldsRef.current[key];\r\n                if (key.startsWith(`${name}[${focusIndexRef.current}]`) &&\r\n                    field.ref.focus) {\r\n                    field.ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        focusIndexRef.current = -1;\r\n    }, [fields, name]);\r\n    useEffect(() => {\r\n        const resetFunctions = resetFieldArrayFunctionRef.current;\r\n        const fieldArrayNames = fieldArrayNamesRef.current;\r\n        if (!getFieldArrayParentName(name)) {\r\n            resetFunctions[name] = (data) => {\r\n                resetFields();\r\n                !data && unset(fieldArrayDefaultValuesRef.current, name);\r\n                unset(shallowFieldsStateRef.current, name);\r\n                memoizedDefaultValues.current = get(data || defaultValuesRef.current, name);\r\n                setFields(mapIds(memoizedDefaultValues.current, keyName));\r\n            };\r\n        }\r\n        return () => {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                return;\r\n            }\r\n            resetFields();\r\n            delete resetFunctions[name];\r\n            unset(fieldArrayValuesRef, name);\r\n            fieldArrayNames.delete(name);\r\n        };\r\n    }, []);\r\n    return {\r\n        swap: useCallback(swap, [name]),\r\n        move: useCallback(move, [name]),\r\n        prepend: useCallback(prepend$1, [name]),\r\n        append: useCallback(append, [name]),\r\n        remove: useCallback(remove, [name]),\r\n        insert: useCallback(insert$1, [name]),\r\n        fields,\r\n    };\r\n};\n\nvar getInputValue = (event) => isPrimitive(event) ||\r\n    !isObject(event.target) ||\r\n    (isObject(event.target) && !event.type)\r\n    ? event\r\n    : isUndefined(event.target.value)\r\n        ? event.target.checked\r\n        : event.target.value;\n\nfunction useController({ name, rules, defaultValue, control, onFocus, }) {\r\n    const methods = useFormContext();\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (!control && !methods) {\r\n            throw new Error('📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller');\r\n        }\r\n    }\r\n    const { defaultValuesRef, setValue, register, unregister, trigger, mode, reValidateMode: { isReValidateOnBlur, isReValidateOnChange }, formState, formStateRef: { current: { isSubmitted, touched, errors }, }, updateFormState, readFormStateRef, fieldsRef, fieldArrayNamesRef, shallowFieldsStateRef, } = control || methods.control;\r\n    const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n    const getInitialValue = () => !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\r\n        ? get(shallowFieldsStateRef.current, name)\r\n        : isUndefined(defaultValue)\r\n            ? get(defaultValuesRef.current, name)\r\n            : defaultValue;\r\n    const [value, setInputStateValue] = useState(getInitialValue());\r\n    const valueRef = useRef(value);\r\n    const ref = useRef({\r\n        focus: () => null,\r\n    });\r\n    const onFocusRef = useRef(onFocus ||\r\n        (() => {\r\n            if (isFunction(ref.current.focus)) {\r\n                ref.current.focus();\r\n            }\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                if (!isFunction(ref.current.focus)) {\r\n                    console.warn(`📋 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method`);\r\n                }\r\n            }\r\n        }));\r\n    const shouldValidate = useCallback((isBlurEvent) => !skipValidation(Object.assign({ isBlurEvent,\r\n        isReValidateOnBlur,\r\n        isReValidateOnChange,\r\n        isSubmitted, isTouched: !!get(touched, name) }, mode)), [\r\n        isReValidateOnBlur,\r\n        isReValidateOnChange,\r\n        isSubmitted,\r\n        touched,\r\n        name,\r\n        mode,\r\n    ]);\r\n    const commonTask = useCallback(([event]) => {\r\n        const data = getInputValue(event);\r\n        setInputStateValue(data);\r\n        valueRef.current = data;\r\n        return data;\r\n    }, []);\r\n    const registerField = useCallback((shouldUpdateValue) => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!name) {\r\n                return console.warn('📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller');\r\n            }\r\n        }\r\n        if (fieldsRef.current[name]) {\r\n            fieldsRef.current[name] = Object.assign({ ref: fieldsRef.current[name].ref }, rules);\r\n        }\r\n        else {\r\n            register(Object.defineProperties({\r\n                name,\r\n                focus: onFocusRef.current,\r\n            }, {\r\n                value: {\r\n                    set(data) {\r\n                        setInputStateValue(data);\r\n                        valueRef.current = data;\r\n                    },\r\n                    get() {\r\n                        return valueRef.current;\r\n                    },\r\n                },\r\n            }), rules);\r\n            shouldUpdateValue = isUndefined(get(defaultValuesRef.current, name));\r\n        }\r\n        shouldUpdateValue &&\r\n            isNotFieldArray &&\r\n            setInputStateValue(getInitialValue());\r\n    }, [rules, name, register]);\r\n    useEffect(() => () => unregister(name), [name]);\r\n    useEffect(() => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (isUndefined(value)) {\r\n                console.warn(`📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`);\r\n            }\r\n            if (!isNotFieldArray && isUndefined(defaultValue)) {\r\n                console.warn('📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller');\r\n            }\r\n        }\r\n        registerField();\r\n    }, [registerField]);\r\n    useEffect(() => {\r\n        !fieldsRef.current[name] && registerField(true);\r\n    });\r\n    const onBlur = useCallback(() => {\r\n        if (readFormStateRef.current.touched && !get(touched, name)) {\r\n            set(touched, name, true);\r\n            updateFormState({\r\n                touched,\r\n            });\r\n        }\r\n        shouldValidate(true) && trigger(name);\r\n    }, [name, updateFormState, shouldValidate, trigger, readFormStateRef]);\r\n    const onChange = useCallback((...event) => setValue(name, commonTask(event), {\r\n        shouldValidate: shouldValidate(),\r\n        shouldDirty: true,\r\n    }), [setValue, name, shouldValidate]);\r\n    return {\r\n        field: {\r\n            onChange,\r\n            onBlur,\r\n            name,\r\n            value,\r\n            ref,\r\n        },\r\n        meta: Object.defineProperties({\r\n            invalid: get(errors, name),\r\n        }, {\r\n            isDirty: {\r\n                get() {\r\n                    return !!get(formState.dirtyFields, name);\r\n                },\r\n            },\r\n            isTouched: {\r\n                get() {\r\n                    return !!get(formState.touched, name);\r\n                },\r\n            },\r\n        }),\r\n    };\r\n}\n\nfunction useWatch({ control, name, defaultValue, }) {\r\n    const methods = useFormContext();\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (!control && !methods) {\r\n            throw new Error('📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch');\r\n        }\r\n    }\r\n    const { useWatchFieldsRef, useWatchRenderFunctionsRef, watchInternal, defaultValuesRef, } = control || methods.control;\r\n    const updateValue = useState()[1];\r\n    const idRef = useRef();\r\n    const defaultValueRef = useRef(defaultValue);\r\n    useEffect(() => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (name === '') {\r\n                console.warn('📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch');\r\n            }\r\n        }\r\n        const id = (idRef.current = generateId());\r\n        const watchFieldsHookRender = useWatchRenderFunctionsRef.current;\r\n        const watchFieldsHook = useWatchFieldsRef.current;\r\n        watchFieldsHook[id] = new Set();\r\n        watchFieldsHookRender[id] = () => updateValue({});\r\n        watchInternal(name, defaultValueRef.current, id);\r\n        return () => {\r\n            delete watchFieldsHook[id];\r\n            delete watchFieldsHookRender[id];\r\n        };\r\n    }, [\r\n        name,\r\n        useWatchRenderFunctionsRef,\r\n        useWatchFieldsRef,\r\n        watchInternal,\r\n        defaultValueRef,\r\n    ]);\r\n    return idRef.current\r\n        ? watchInternal(name, defaultValueRef.current, idRef.current)\r\n        : isUndefined(defaultValue)\r\n            ? isString(name)\r\n                ? get(defaultValuesRef.current, name)\r\n                : Array.isArray(name)\r\n                    ? name.reduce((previous, inputName) => (Object.assign(Object.assign({}, previous), { [inputName]: get(defaultValuesRef.current, inputName) })), {})\r\n                    : defaultValuesRef.current\r\n            : defaultValue;\r\n}\n\nconst Controller = (props) => {\r\n    const { rules, as, render, defaultValue, control, onFocus } = props, rest = __rest(props, [\"rules\", \"as\", \"render\", \"defaultValue\", \"control\", \"onFocus\"]);\r\n    const { field, meta } = useController(props);\r\n    const componentProps = Object.assign(Object.assign({}, rest), field);\r\n    return as\r\n        ? isValidElement(as)\r\n            ? cloneElement(as, componentProps)\r\n            : createElement(as, componentProps)\r\n        : render\r\n            ? render(field, meta)\r\n            : null;\r\n};\n\nexport { Controller, FormProvider, appendErrors, get, transformToNestObject, useController, useFieldArray, useForm, useFormContext, useWatch };\n//# sourceMappingURL=index.esm.js.map\n","export * from 'react-hook-form'\n"],"sourceRoot":""}